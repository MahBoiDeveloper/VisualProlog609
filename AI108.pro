%  Выполнил: Подвигин В.А. 6О-208Б-17. Задача №AI108. 
%
%                                                 Судебный процесс 2
%- Я хочу рассказать тебе об одном судебном процессе, на котором мне не довелось быть самому. Мне рассказал о нем Бармаглот.
%  По словам Бармаглота, подсудимых было трое. Каждый из них обвинял одного из двух других, но кто кого обвинял, Бармаглот мне не сказал.
%  Однако он сообщил мне, что первый обвиняемый говорил правду.
%- А о втором обвиняемом что-нибудь известно?- спросила Алиса.
%- Бармаглот ничего не сказал мне о том, говорил ли второй обвиняемый правду или лгал.
%- А третий?-спросила Алиса.
%- Бармаглот сообщил мне, либо что третий подсудимый лгал, либо что тот говорил правду, но, к сожалению, я не помню, что именно сказал Бармаглот.
% Помню лишь, что после того, как он сказал мне то, что он сказал, я смог определить, кто из троих подсудимых виновен, но, к сожалению, 
% я забыл, кто это был.
% Кто из троих подсудимых виновен?


DOMAINS
    номер = integer
    правдивость,виновность = symbol
    подсудимый = подсудимый(номер,правдивость,виновность, номер)
    подсудимые = подсудимый*
    номера=номер*
    cписок_номеров=номера*
    cписок_подсудимых=подсудимые*
    
PREDICATES
    nondeterm входит_в(подсудимый,подсудимые)
    nondeterm входит_в(номер,номера)
    nondeterm решение_без_повторов(номера, номера, номера)
    nondeterm решение_без_повторов(cписок_номеров,  cписок_номеров,  cписок_номеров)
    nondeterm один_из(номер, номера)
    nondeterm один_из(номера, cписок_номеров)
    nondeterm количество(cписок_номеров, integer) 
    nondeterm количество(номера, integer) 
    
    nondeterm возможный_номер(номер)
    nondeterm возможная_вина(виновность)
    nondeterm возможная_правдивость(правдивость)
    
    nondeterm генерация_гипотезы(подсудимые)
    nondeterm сказал(номер,подсудимые)
    nondeterm проверка_гипотезы(подсудимые)
    nondeterm поиск_виновных(номера, правдивость)
    nondeterm определить_правдивость(номер)
       
CLAUSES
    входит_в(Подсудимый,[Подсудимый|_]).
    входит_в(Подсудимый,[_|Хвост]):-входит_в(Подсудимый,Хвост).
    
    один_из(Элемент, [Первый|_]):- Элемент = Первый.
    один_из(Элемент, [Первый|Остальные]):- not(Элемент = Первый), один_из(Элемент, Остальные).
    
    решение_без_повторов([], Накопитель, СписокБезПовторов):- СписокБезПовторов = Накопитель.
    решение_без_повторов([ПервыйЭлемент|ОстальныеЭлементы], Накопитель, СписокБезПовторов):-
    один_из(ПервыйЭлемент, Накопитель), 
    решение_без_повторов(ОстальныеЭлементы, Накопитель, СписокБезПовторов).
    решение_без_повторов([ПервыйЭлемент|ОстальныеЭлементы], Накопитель, СписокБезПовторов):-
    NOT(один_из(ПервыйЭлемент, Накопитель)),
    решение_без_повторов(ОстальныеЭлементы, [ПервыйЭлемент|Накопитель], СписокБезПовторов).    
    
    количество([], 0).
    количество([_Первый|Хвост_количества], Количество):-
    	количество(Хвост_количества, КоличествоОстальных),
    	Количество = КоличествоОстальных+1.
   
    возможная_правдивость(правда).
    возможная_правдивость(ложь).   
    возможная_вина(виновен).
    возможная_вина(не_виновен).   
    возможный_номер(1).
    возможный_номер(2).
    возможный_номер(3).
     	
    /*     Генерация гипотезы    */
    генерация_гипотезы(Подсудимые):-
        возможная_правдивость(Правдивость2),возможная_правдивость(Правдивость3),
        возможная_вина(Вина1),возможная_вина(Вина2),возможная_вина(Вина3),
        %  Каждый из них обвинял одного из двух других
        возможный_номер(Обвиняемый1), not(Обвиняемый1=1),
        возможный_номер(Обвиняемый2), not(Обвиняемый2=2),
        возможный_номер(Обвиняемый3), not(Обвиняемый3=3),
        %  Однако он сообщил мне, что первый обвиняемый говорил правду.
        Подсудимые=[подсудимый(1,правда,Вина1,Обвиняемый1),
        	    подсудимый(2,Правдивость2,Вина2,Обвиняемый2),
        	    подсудимый(3,Правдивость3,Вина3,Обвиняемый3)],
        findall(Номер, входит_в(подсудимый(Номер, _, виновен,_), Подсудимые), Виновные), 
				   количество(Виновные,ЧислоВиновных), ЧислоВиновных=1.
				   
% Каждый из них обвинял одного из двух других				   
    сказал(Номер,Подсудимые):-   
    	входит_в(подсудимый(Номер, правда, _, Обвиняемый), Подсудимые),
    	входит_в(подсудимый(Обвиняемый, _, виновен, _), Подсудимые);
    	входит_в(подсудимый(Номер, ложь, _, Обвиняемый), Подсудимые),
    	входит_в(подсудимый(Обвиняемый, _, не_виновен, _), Подсудимые).
    	 	
    проверка_гипотезы(Подсудимые):-
    	генерация_гипотезы(Подсудимые),
     	сказал(1,Подсудимые),
     	сказал(2,Подсудимые),
     	сказал(3,Подсудимые).	
        
     поиск_виновных(Виновные, Правдивость3):-
     	проверка_гипотезы(Подсудимые),
     	входит_в(подсудимый(3, Правдивость3, _,_),Подсудимые),
     	findall(Номер, входит_в(подсудимый(Номер, _, виновен,_), Подсудимые), Виновные).
      
     определить_правдивость(Виновный):-
    	findall(Виновные, поиск_виновных(Виновные,правда), ВсеВиновные),
    	решение_без_повторов(ВсеВиновные, [], Виновные),
        количество(Виновные,КоличествоРешений), КоличествоРешений=1,
        Виновные=[[Виновный]|_];
    	findall(Виновные, поиск_виновных(Виновные,ложь), ВсеВиновные),
    	решение_без_повторов(ВсеВиновные, [], Виновные),
        количество(Виновные,КоличествоРешений), КоличествоРешений=1,
        Виновные=[[Виновный]|_].
   	   		       
GOAL
     определить_правдивость(Виновен_подсудимый_под_номером).