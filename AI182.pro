/*
               ПРОКЛАДКА ЖЕЛЕЗНОДОРОЖНЫХ ПУТЕЙ
Между пятью городами, из которых никакие три не лежат на одной прямой,
требуется проложить сеть железных дорог из четырех прямолинейных отрезков.
Железнодорожные пути могут пересекаться: в местах пересечения будут построены
путепроводы.
Сколько существует вариантов прокладки железнодорожной сети?
*/

DOMAINS
    город          = integer
    список_городов = город*
    путь           = путь(город,город)
    сеть_путей     = путь*

PREDICATES
    nondeterm возможный_город                         (город)
    nondeterm проверить_вхождение                     (город,список_городов)
    nondeterm проверить_вхождение                     (путь,сеть_путей)
    nondeterm все_города                              (список_городов)
    nondeterm нет_путей_сам_в_себя                    (сеть_путей)
    nondeterm нет_взаимо_обратных_путей               (сеть_путей)
    nondeterm получить_список_городов_остальных_путей (путь, сеть_путей, список_городов)
    nondeterm нет_изолированных_пар_городов           (сеть_путей, сеть_путей)
    nondeterm решение                                 (сеть_путей)
    
CLAUSES
    возможный_город(1).
    возможный_город(2).
    возможный_город(3).
    возможный_город(4).
    возможный_город(5).
    
    %проверить есть ли хотя бы одно вхождение
    проверить_вхождение(Первый, [Первый|_]):-!.
    проверить_вхождение(Первый, [_|Хвост_списка])
    :-
        проверить_вхождение(Первый, Хвост_списка)
    .

    %должны быть связаны все города (первые четыре указаны в списке путей гипотезы)
    все_города(Все_города)
    :-
        проверить_вхождение(5, Все_города)
    .

    %нет таких путей, которые связывают город с самим собой
    нет_путей_сам_в_себя([]).
    нет_путей_сам_в_себя([Путь|Хвост])
    :-
        нет_путей_сам_в_себя(Хвост),
        Путь = путь(Город_1, Город_2),
        not(Город_1 = Город_2)
    .

    %нет одинаковых путей, отличающихся порядком городов
    нет_взаимо_обратных_путей([_]).
    нет_взаимо_обратных_путей([Путь|Хвост])
    :-
        нет_взаимо_обратных_путей(Хвост),
        Путь = путь(Город_1, Город_2),
        not(проверить_вхождение(путь(Город_2, Город_1), Хвост))
    .

    % найти города всех путей, отличных от текущего
    получить_список_городов_остальных_путей(_, [], []).
    получить_список_городов_остальных_путей(Путь, [Путь_1|Хвост], Список_городов)
    :-
        получить_список_городов_остальных_путей(Путь, Хвост, Список_городов_1),
        not(Путь_1 = Путь),
        Путь_1 = путь(Город_1, Город_2),
        Список_городов = [Город_1, Город_2 | Список_городов_1];

        получить_список_городов_остальных_путей(Путь, Хвост, Список_городов_1),
        Путь_1 = Путь,
        Список_городов = Список_городов_1
    .


    % проверить, что какой-либо город текущего пути присутствует в любом другом пути (хотя бы один раз)
    нет_изолированных_пар_городов([], _).
    нет_изолированных_пар_городов([Путь|Хвост], Сеть_путей)
    :-
        нет_изолированных_пар_городов(Хвост, Сеть_путей),
        получить_список_городов_остальных_путей(Путь, Сеть_путей, Список_городов),
        Путь = путь(Город_1, _),
        проверить_вхождение(Город_1, Список_городов),!
    ;
        нет_изолированных_пар_городов(Хвост, Сеть_путей),
        получить_список_городов_остальных_путей(Путь, Сеть_путей, Список_городов),
        Путь = путь(_, Город_2),
        проверить_вхождение(Город_2, Список_городов),!
    .

    %генерация и проверка гипотезы
    решение(Сеть_путей)
    :-
        %генерация
        возможный_город(Город_1),
        возможный_город(Город_2),
        возможный_город(Город_3),
        возможный_город(Город_4),
        
        %для каждого города должен быть минимум один путь, поэтому
        %список путей будет упорядочен по первым четырем городам
        Сеть_путей=[путь(1,Город_1),
                    путь(2,Город_2),
                    путь(3,Город_3),
                    путь(4,Город_4)],

        %проверка
        Все_города=[Город_1,Город_2,Город_3,Город_4],
        все_города(Все_города),

        нет_путей_сам_в_себя(Сеть_путей),
        нет_взаимо_обратных_путей(Сеть_путей),
        нет_изолированных_пар_городов(Сеть_путей, Сеть_путей)
    .

GOAL
    решение(Сеть_путей).