/*
                                         ЛАКОМСТВО I
Однажды Юльчи, Пишта, Эржи и Иошка остались дома одни.
Мама, прежде чем уйти, строго-настрого наказала, чтобы до самого вечера,
до ее возвращения, никто не смел прикасаться к тарелке с вкусным пудингом, приготовленным на ужин.
Опустим подробности (они здесь заведомо неуместны), Скажем только, 
что когда мама вернулась домой, то увидела в кухне на полу лишь осколки от красивой фарфоровой тарелки,
среди осколков - остатки ужина, а вокруг-четырех своих питомцев, стоявших с весьма виноватым видом.
Произведенное мамой расследование показало:
Юльчи.  (1)  Я не опрокидывала тарелку с пудингом.
        (2)  Когда я вошла в кухню, там уже был Пишта.
        (3)  Иошка вошел в кухню после меня.
Пишта.  (4)  Я не опрокидывал тарелку с пудингом.
        (5)  Когда я вошел в кухню, там уже была Юльчи.
        (6)  Иошка вошел в кухню после всех.
Эржи.   (7)  Это не я разбила тарелку.
        (8)  И Юльчи и Пишта лгут.
        (9)  Когда я вошла в кухню, там уже находился Иошка.
Иошка.  (10) Это не я опрокинул ужин на пол.
        (11) Когда я в последний раз выходил из кухни, там раздался сильный грохот.
        (12) Пишта вошел в кухню до меня.
Мама задала детям еще несколько вопросов и, выслушав ответы, убедилась в том,
что три правдивых показания дал лишь тот, кто последним вошел на кухню,
остальные дети сочли возможным ограничиться лишь двумя правдивыми утверждениями,
а один раз позволили себе солгать.
Кто опрокинул на пол тарелку с пудингом?
*/
DOMAINS

    высказывание                        = высказывание( ребёнок, номер_высказывания, содержание )
    ребёнок                             = ребёнок( имя, роль, номер_по_списку )
    содержание                          = ложь; истина
    роль                                = виновен; не_виновен
    имя                                 = юльчи; пишта; эржи; иошка
    номер_высказывания, номер_по_списку = integer
    список_высказываний                 = высказывание*

    решение                             = решение( имя, роль )
    список_решений                      = решение*

PREDICATES

    nondeterm возможное_имя                   (имя)
    nondeterm возможная_роль                  (роль)
    nondeterm возможный_номер_высказывания    (номер_высказывания)
    nondeterm правильное_распределение_ролей  (роль, роль, роль, роль)

    nondeterm найти                           (имя, список_высказываний, ребёнок) - (i,i,o)
    nondeterm проверка                        (высказывание, список_высказываний)
    nondeterm говорит                         (высказывание, список_высказываний)
    
    nondeterm генератор_решений               (решение)

    nondeterm найти                           (решение, список_решений)
    nondeterm поиск_виновного                 (список_решений, решение) - (i,o)
    nondeterm решение_без_повторов            (список_решений, список_решений, список_решений) - (i,i,o)
    nondeterm поиск_решения                   (список_решений)

CLAUSES

% служебные предикаты

    возможное_имя(иошка).
    возможное_имя(юльчи).
    возможное_имя(эржи) .
    возможное_имя(пишта).

    возможная_роль(виновен).
    возможная_роль(не_виновен).

    возможный_номер_высказывания(1).
    возможный_номер_высказывания(2).
    возможный_номер_высказывания(3).

    правильное_распределение_ролей( А, Б, В, Г )
    :-
        А = виновен,
        Б = не_виновен,
        В = не_виновен,
        Г = не_виновен;

        А = не_виновен,
        Б = виновен,
        В = не_виновен,
        Г = не_виновен;

        А = не_виновен,
        Б = не_виновен,
        В = виновен,
        Г = не_виновен;

        А = не_виновен,
        Б = не_виновен,
        В = не_виновен,
        Г = виновен
    .

    поиск_виновного( [ решение(Имя, Роль) | Остаток_списка ], Виновный )
    :-
        Роль = не_виновен,
        поиск_виновного( Остаток_списка, Виновный );
        Роль = виновен,
        Виновный = решение(Имя, Роль)
    .

    найти
    (
        Имя,
        [
            высказывание( ребёнок(_Имя, Роль, Порядковый_номер), _, _ )
            |
            Остаток_списка
        ],
        Ребёнок

    )
    :-
        not( Имя = _Имя ),
        найти( Имя, Остаток_списка, Ребёнок );
        Имя = _Имя,
        Ребёнок = ребёнок( _Имя, Роль, Порядковый_номер )
    .

    найти( Элемент, [ Первый | _ ] )
    :-
        Элемент = Первый
    .
    найти( Элемент, [ Первый | Остальные ] )
    :-
        not( Элемент = Первый ),
        найти( Элемент, Остальные )
    .

    решение_без_повторов( [], Накопитель, СписокБезПовторов )
    :-
        СписокБезПовторов = Накопитель
    .
    решение_без_повторов( [ ПервыйЭлемент | ОстальныеЭлементы ], Накопитель, СписокБезПовторов )
    :-
        найти( ПервыйЭлемент, Накопитель ), 
        решение_без_повторов( ОстальныеЭлементы, Накопитель, СписокБезПовторов )
    .
    решение_без_повторов( [ ПервыйЭлемент | ОстальныеЭлементы ], Накопитель, СписокБезПовторов )
    :-
        not( найти(ПервыйЭлемент, Накопитель) ),
        решение_без_повторов( ОстальныеЭлементы, [ ПервыйЭлемент | Накопитель ], СписокБезПовторов )
    .

% проверка высказываний детей
    проверка( высказывание(Ребёнок, Номер_высказывания, Содержание), Список_высказываний )
    :-
        Содержание = истина,
        говорит( высказывание(Ребёнок, Номер_высказывания, Содержание), Список_высказываний );

        Содержание = ложь,
        not(говорит( высказывание(Ребёнок, Номер_высказывания, Содержание), Список_высказываний ))
    .

% Юльчи.
% (1)  Я не опрокидывала тарелку с пудингом.
    говорит( высказывание(ребёнок(юльчи, Роль_юльчи, _), 1, _), _ )
    :-
        Роль_юльчи = не_виновен
    .
% (2)  Когда я вошла в кухню, там уже был Пишта.
    говорит( высказывание(ребёнок(юльчи, _, Номер_юльчи), 2, _), Список )
    :-
        найти( пишта, Список, Пишта ),
        Пишта = ребёнок(_, _, Номер_пишты),
        Номер_пишты < Номер_юльчи
    .
% (3)  Иошка вошел в кухню после меня.
    говорит( высказывание(ребёнок(юльчи, _, Номер_юльчи), 3, _), Список )
    :-
        найти( иошка, Список, Иошка ),
        Иошка = ребёнок(_, _, Номер_иошки),
        Номер_иошки > Номер_юльчи
    .

% Пишта.
% (4)  Я не опрокидывал тарелку с пудингом.
    говорит( высказывание(ребёнок(пишта, Роль_пишты, _), 1, _), _ )
    :-
        Роль_пишты = не_виновен
    .
% (5)  Когда я вошел в кухню, там уже была Юльчи.
    говорит( высказывание(ребёнок(пишта, _, Номер_пишты), 2, _), Список )
    :-
        найти( юльчи, Список, Юльчи ),
        Юльчи = ребёнок(_, _, Номер_юльчи),
        Номер_юльчи < Номер_пишты
    .
% (6)  Иошка вошел в кухню после всех.
    говорит( высказывание(ребёнок(пишта, _, _), 3, _), Список )
    :-
        найти( иошка, Список, Иошка ),
        Иошка = ребёнок(_, _, Номер_иошки),
        Номер_иошки = 4
    .

% Эржи.
% (7)  Это не я разбила тарелку.
    говорит( высказывание(ребёнок(эржи, Роль_эржи, _), 1, _), _ )
    :-
        Роль_эржи = не_виновен
    .
% (8)  И Юльчи и Пишта лгут.
    говорит( высказывание(ребёнок(эржи, _, _), 2, _), Список )
    :-
        найти( юльчи, Список, Юльчи ),
        Юльчи = ребёнок(_, _, Номер_юльчи),
        найти( пишта, Список, Пишта ),
        Пишта = ребёнок(_, _, Номер_пишты),
        not( Номер_пишты = 4 ),
        not( Номер_юльчи = 4 )
    .
% (9)  Когда я вошла в кухню, там уже находился Иошка.
    говорит( высказывание(ребёнок(эржи, _, Номер_эржи), 3, _), Список)
    :-
        найти( иошка, Список, Иошка ),
        Иошка = ребёнок(_, _, Номер_иошки),
        Номер_иошки < Номер_эржи
    .

% Иошка.
% (10) Это не я опрокинул ужин на пол.
    говорит( высказывание(ребёнок(иошка, Роль_иошки, _), 1, _), _ )
    :-
        Роль_иошки = не_виновен
    .
% (11) Когда я в последний раз выходил из кухни, там раздался сильный грохот.
    говорит( высказывание(ребёнок(иошка, Роль_иошки, _), 2, _), _ )
    :-
        Роль_иошки = не_виновен
    .
% (12) Пишта вошел в кухню до меня.
    говорит( высказывание(ребёнок(иошка, _, Номер_иошки), 3, _), Список )
    :-
        найти( пишта, Список, Пишта ),
        Пишта = ребёнок(_, _, Номер_пишты),
        Номер_пишты < Номер_иошки
    .


% генерация и проверка гипотез
    генератор_решений( Виновный )
    :-
% генерация гипотезы
        возможное_имя( Возможное_имя1 ),
        возможное_имя( Возможное_имя2 ),
        возможное_имя( Возможное_имя3 ),
        возможное_имя( Возможное_имя4 ),
        not( Возможное_имя1 = Возможное_имя2 ),
        not( Возможное_имя1 = Возможное_имя3 ),
        not( Возможное_имя1 = Возможное_имя4 ),
        not( Возможное_имя2 = Возможное_имя3 ),
        not( Возможное_имя2 = Возможное_имя4 ),
        not( Возможное_имя3 = Возможное_имя4 ),
        возможный_номер_высказывания( N11 ),
        возможный_номер_высказывания( N12 ),
        возможный_номер_высказывания( N13 ),
        not( N11 = N12 ),
        not( N11 = N13 ),
        not( N12 = N13 ),
        возможный_номер_высказывания( N21 ),
        возможный_номер_высказывания( N22 ),
        возможный_номер_высказывания( N23 ),
        not( N21 = N22 ),
        not( N21 = N23 ),
        not( N22 = N23 ),
        возможный_номер_высказывания( N31 ),
        возможный_номер_высказывания( N32 ),
        возможный_номер_высказывания( N33 ),
        not( N31 = N32 ),
        not( N31 = N33 ),
        not( N32 = N33 ),
        возможная_роль( Роль1 ),
        возможная_роль( Роль2 ),
        возможная_роль( Роль3 ),
        возможная_роль( Роль4 ),
        правильное_распределение_ролей( Роль1, Роль2, Роль3, Роль4 ),

        H11 = высказывание(ребёнок( Возможное_имя1, Роль1, 1 ), N11, истина),
        H12 = высказывание(ребёнок( Возможное_имя1, Роль1, 1 ), N12, истина),
        H13 = высказывание(ребёнок( Возможное_имя1, Роль1, 1 ), N13, ложь  ),

        H21 = высказывание(ребёнок( Возможное_имя2, Роль2, 2 ), N21, истина),
        H22 = высказывание(ребёнок( Возможное_имя2, Роль2, 2 ), N22, истина),
        H23 = высказывание(ребёнок( Возможное_имя2, Роль2, 2 ), N23, ложь  ),

        H31 = высказывание(ребёнок( Возможное_имя3, Роль3, 3 ), N31, истина),
        H32 = высказывание(ребёнок( Возможное_имя3, Роль3, 3 ), N32, истина),
        H33 = высказывание(ребёнок( Возможное_имя3, Роль3, 3 ), N33, ложь  ),

        H41 = высказывание(ребёнок( Возможное_имя4, Роль4, 4 ),   1, истина),
        H42 = высказывание(ребёнок( Возможное_имя4, Роль4, 4 ),   2, истина),
        H43 = высказывание(ребёнок( Возможное_имя4, Роль4, 4 ),   3, истина),

        Список_высказываний = [ H11, H12, H13, H21, H22, H23, H31, H32, H33, H41, H42, H43 ],

% проверка гипотезы
        проверка( H11, Список_высказываний ),
        проверка( H12, Список_высказываний ),
        проверка( H13, Список_высказываний ),
        проверка( H21, Список_высказываний ),
        проверка( H22, Список_высказываний ),
        проверка( H23, Список_высказываний ),
        проверка( H31, Список_высказываний ),
        проверка( H32, Список_высказываний ),
        проверка( H33, Список_высказываний ),
        проверка( H41, Список_высказываний ),
        проверка( H42, Список_высказываний ),
        проверка( H43, Список_высказываний ),

% гипотеза проверена, и она является решением
        Список_детей =
        [
            решение( Возможное_имя1, Роль1 ),
            решение( Возможное_имя2, Роль2 ),
            решение( Возможное_имя3, Роль3 ),
            решение( Возможное_имя4, Роль4 )
        ],
        поиск_виновного( Список_детей, Виновный )
    .

    поиск_решения( Список_решений )
    :-
        findall
        (
            _Решения,
            генератор_решений( _Решения ),
            Решения
        ),
        решение_без_повторов( Решения, [], Список_решений )
    .

GOAL
    поиск_решения( Список_решений ).
