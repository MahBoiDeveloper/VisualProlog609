/*
                Семейный дом
В одном доме жило несколько супружеских пар с детьми.

О них известно, что всех детей было больше, чем взрослых, а взрослых — больше, чем мальчиков.
В свою очередь, мальчиков было больше, чем девочек, а девочек — больше, чем семей.
В каждой семье был по крайней мере один ребенок, а число детей во всех семьях было различным.
У каждой девочки был по крайней мере один брат и не более одной сестры.
В одной семье детей было больше, чем во всех остальных семьях вместе.

Сколько семей жило в доме? Сколько девочек было в каждой семье?
*/
DOMAINS
    количество, номер = integer
    признак           = symbol
    список_количеств  = количество*
    семья             = семья(количество, количество, количество, количество)
    список_семей      = семья*
    список_списков    = список_семей*
PREDICATES
    nondeterm возможное_количество_семей              (количество)
    nondeterm возможное_количество_детей              (количество)
    nondeterm генерация_семьи                         (семья)
    nondeterm условие_для_семьи                       (номер, семья)
    nondeterm проверка_семьи                          (семья)
    nondeterm генерация_списка_семей                  (количество, список_семей)
    nondeterm определить_количество_по_признаку       (признак, семья, количество)
    nondeterm посчитать_количество                    (признак, список_семей, количество)
    nondeterm составить_список_количеств_детей        (список_семей, список_количеств)
    nondeterm входит_в                                (количество, список_количеств)
    nondeterm входит_в                                (список_семей, список_списков)
    nondeterm проверка_всех_элементов_на_уникальность (список_количеств)
    nondeterm условие_для_всех_семей                  (номер, список_семей)
    nondeterm проверка_списка_семей                   (список_семей)
    nondeterm генерация_и_проверка_гипотезы           (список_семей)
    nondeterm составить_список_количеств_девочек      (список_семей, список_количеств)
    nondeterm получить_список_одинаковых_решений      (список_списков)
    nondeterm текущий_список_не_похож                 (список_семей, список_семей)
    nondeterm нет_похожего_списка_семей               (список_семей, список_списков)
    nondeterm отсев_повторов                          (список_списков, список_списков)
    nondeterm поиск_решения                           (количество, список_количеств)
CLAUSES
    % В одном доме жило несколько супружеских пар с детьми
    % это значит, что семей минимум две
    возможное_количество_семей(2).
    возможное_количество_семей(3).
    возможное_количество_семей(4).
    возможное_количество_семей(5).

    % предположим количество мальчиков или девочек в семье
    возможное_количество_детей(0).
    возможное_количество_детей(1).
    возможное_количество_детей(2).
    возможное_количество_детей(3).
    возможное_количество_детей(4).
    возможное_количество_детей(5).

    % семья состоит из 2-х взрослых(супружеская пара) и из определенного количества мальчиков и девочек
    генерация_семьи(Семья)
    :-
        возможное_количество_детей(Мальчиков),
        возможное_количество_детей(Девочек),
        Детей = Мальчиков + Девочек,
        Семья = семья(2, Мальчиков, Девочек, Детей)
    .

    % В каждой семье был по крайней мере один ребенок
    условие_для_семьи(1, Семья)
    :-
        Семья = семья(_, _, _, Детей),
        Детей > 0
    .

    % У каждой девочки был по крайней мере один брат и не более одной сестры.
    условие_для_семьи(2, Семья)
    :-
        Семья     =  семья(_, Мальчиков, Девочек, _),
        Девочек   >  0,
        Мальчиков >  0, 
        Девочек   <= 2
    .

    условие_для_семьи(2, Семья)
    :-
        Семья   = семья(_, _, Девочек, _),
        Девочек = 0
    .

    % проверка выполнения условий для каждой семьи
    проверка_семьи(Семья)
    :-
        условие_для_семьи(1, Семья),
        условие_для_семьи(2, Семья)
    .
    
    % составить список из семей (количество семей задано)
    генерация_списка_семей(0, []).
    генерация_списка_семей(Число, Список_семей)
    :-
        not(Число = 0), Число_1 = Число - 1, 
        генерация_списка_семей(Число_1, Список_семей_1),
        генерация_семьи(Семья), проверка_семьи(Семья),
        Список_семей = [Семья | Список_семей_1]
    .
    
    определить_количество_по_признаку(Признак, Семья, Число)
    :-
        Признак = "Взрослых",
        Семья   = семья(Число, _, _, _)
    ;
        Признак = "Мальчиков",
        Семья   = семья(_, Число, _, _)
    ;
        Признак = "Девочек",
        Семья   = семья(_, _, Число, _)
    ;
        Признак = "Детей",
        Семья   = семья(_, _, _, Число)
    ;
        Признак = "Семей",
        Число   = 1
    .

    % предикаты для подсчета различных данных из списка семей
    посчитать_количество(_, [], 0).
    посчитать_количество(Признак, [Семья | Хвост], Количество)
    :-
        посчитать_количество(Признак, Хвост, Количество_1),
        определить_количество_по_признаку(Признак, Семья, Число),
        Количество = Количество_1 + Число
    .

    составить_список_количеств_детей([], []).
    составить_список_количеств_детей([Семья | Хвост], Список_количеств)
    :-
        составить_список_количеств_детей(Хвост, Список_количеств_1),
        Семья = семья(_, _, _, Детей_в_семье),
        Список_количеств = [Детей_в_семье | Список_количеств_1]
    .

    % предикат поиска
    входит_в(Первый, [Первый | _]).
    входит_в(Первый, [_ | Хвост])
    :-
        входит_в(Первый, Хвост)
    .
    
    % проверить, что все элементы списка уникальны
    проверка_всех_элементов_на_уникальность([]).
    проверка_всех_элементов_на_уникальность([Элемент | Хвост])
    :-
        проверка_всех_элементов_на_уникальность(Хвост),
        not(входит_в(Элемент, Хвост))
    .

    % О них известно, что всех детей было больше, чем взрослых, а взрослых — больше, чем мальчиков.
    условие_для_всех_семей(1, Список_семей)
    :-
        посчитать_количество("Детей", Список_семей, Количество_детей),
        посчитать_количество("Взрослых", Список_семей, Количество_взрослых),
        посчитать_количество("Мальчиков", Список_семей, Количество_мальчиков),

        Количество_детей    > Количество_взрослых,
        Количество_взрослых > Количество_мальчиков
    .
    
    % В свою очередь, мальчиков было больше, чем девочек, а девочек — больше, чем семей.
    условие_для_всех_семей(2, Список_семей)
    :-
        посчитать_количество("Мальчиков", Список_семей, Количество_мальчиков),
        посчитать_количество("Девочек", Список_семей, Количество_девочек),
        посчитать_количество("Семей", Список_семей, Количество_семей),

        Количество_мальчиков > Количество_девочек,
        Количество_девочек   > Количество_семей
    .
    
    %число детей во всех семьях было различным.
    условие_для_всех_семей(3, Список_семей)
    :-
        составить_список_количеств_детей(Список_семей, Список_количеств),
        проверка_всех_элементов_на_уникальность(Список_количеств)
    .

    % В одной семье детей было больше, чем во всех остальных семьях вместе.
    условие_для_всех_семей(4, Список_семей)
    :-
        составить_список_количеств_детей(Список_семей, Список_количеств),
        посчитать_количество("Детей", Список_семей, Количество_детей),
        входит_в(Число_детей_в_семье, Список_количеств),
        Число_детей_в_семье > Количество_детей - Число_детей_в_семье
    .

    проверка_списка_семей(Список_семей)
    :-
        условие_для_всех_семей(1, Список_семей),
        условие_для_всех_семей(2, Список_семей),
        условие_для_всех_семей(3, Список_семей),
        условие_для_всех_семей(4, Список_семей)
    .

    % генерация и проверка гипотезы
    генерация_и_проверка_гипотезы(Список_семей)
    :- 
        % генерация
        возможное_количество_семей(Количество_семей),
        генерация_списка_семей(Количество_семей, Список_семей),

        % проверка
        проверка_списка_семей(Список_семей)
    .

    
    % найти сколько девочек в каждой семье
    составить_список_количеств_девочек([], []).
    составить_список_количеств_девочек([Семья | Хвост], Список_количеств)
    :-
        составить_список_количеств_девочек(Хвост, Список_количеств_1),
        Семья            = семья(_, _, Девочек, _),
        Список_количеств = [Девочек | Список_количеств_1]
    .

    % получить список с набором повторяющихся решений
    получить_список_одинаковых_решений(Список_гипотез)
    :-
        findall
        (
            Гипотеза,
            генерация_и_проверка_гипотезы(Гипотеза),
            Список_гипотез
        )
    .

    % семьи уникальны, если отличаются количеством девочек
    текущий_список_не_похож(Семьи, Семьи_1)
    :-
        посчитать_количество("Семей",   Семьи,   Количество),
        посчитать_количество("Семей",   Семьи_1, Количество),
        посчитать_количество("Девочек", Семьи,   Девочек),
        посчитать_количество("Девочек", Семьи_1, Девочек_1),
        not(Девочек = Девочек_1)
    .

    % проверка на уникальность
    нет_похожего_списка_семей(_, []).
    нет_похожего_списка_семей(Семьи, [Семьи_1 | Хвост_списка])
    :-
        нет_похожего_списка_семей(Семьи, Хвост_списка),
        текущий_список_не_похож(Семьи, Семьи_1)
    .

    % оставить уникальные решения
    отсев_повторов([], []). 
    отсев_повторов([Семьи | Хвост_списка], Список)
    :-
        отсев_повторов(Хвост_списка, Список_1),
        нет_похожего_списка_семей(Семьи, Список_1),
        Список = [Семьи | Список_1]
    ;
        отсев_повторов(Хвост_списка, Список_1),
        not(нет_похожего_списка_семей(Семьи, Список_1)),
        Список = Список_1
    .

    % найти искомую информацию
    поиск_решения(Семей_в_доме, Список_девочек)
    :-
        получить_список_одинаковых_решений(Список_дублей),
        отсев_повторов(Список_дублей, Список),
        входит_в(Список_семей, Список),

        посчитать_количество("Семей", Список_семей, Семей_в_доме),
        составить_список_количеств_девочек(Список_семей, Список_девочек)
    .

GOAL
    поиск_решения(Семей_в_доме, Девочек_в_семьях).
