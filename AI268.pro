/*
                                  Каток
Четыре подруги пришли на каток каждая со своим братом. Они разбились на пары
и начали кататься. Оказалось, что в каждой паре дама выше кавалера и никто не катается
со своим братом. По убыванию роста компания выстраивается так: Люся Егорова, Оля
Петрова, Юра Воробьев, Инна Крымова, Андрей Егоров, Аня Воробьева, Сережа Петров и
Дима Крымов.
Кто с кем катался?
*/
DOMAINS
    номер             = integer
    имя, фамилия, пол = symbol
    партнер           = партнер(имя, фамилия, пол)
    список_партнеров  = партнер*
    пара              = пара(партнер, партнер)
    список_пар        = пара*
PREDICATES
    nondeterm список_партнеров_по_росту             (список_партнеров)
    nondeterm возможный_партнер                     (партнер, пол)
    nondeterm родственники                          (партнер, партнер)
    nondeterm входит_в                              (пара, список_пар)
    nondeterm входит_в                              (партнер, список_партнеров)
    nondeterm найти_номер_в_списке_по_росту         (партнер, список_партнеров, номер, номер)
    nondeterm условие_по_росту                      (пара)
    nondeterm проверка_условия_по_росту             (список_пар)
    nondeterm условие_отсутствия_пар_брат_и_сестра  (пара)
    nondeterm проверка_отсутствия_пар_брат_и_сестра (список_пар)
    nondeterm генерация_и_проверка_гипотезы         (список_пар)
    nondeterm поиск_решения                         (список_пар)
CLAUSES
    список_партнеров_по_росту(Список)
    :-
        Список = 
        [
            партнер("Люся",   "Егорова",   ж), 
            партнер("Оля",    "Петрова",   ж), 
            партнер("Юра",    "Воробьев",  м),
            партнер("Инна",   "Крымова",   ж), 
            партнер("Андрей", "Егоров",    м), 
            партнер("Аня",    "Воробьева", ж), 
            партнер("Сережа", "Петров",    м), 
            партнер("Дима",   "Крымов",    м)
        ]
    .

    возможный_партнер(Партнер, Пол)
    :-
        список_партнеров_по_росту(Список),
        входит_в(Партнер, Список),
        Партнер = партнер(_, _, Пол_партнера),
        not(Пол = Пол_партнера)
    .

    родственники(Партнер_1, Партнер_2) 
    :- 
        Партнер_1 = партнер("Люся",   "Егорова",   ж), 
        Партнер_2 = партнер("Андрей", "Егоров",    м)
    ;
        Партнер_1 = партнер("Оля",    "Петрова",   ж), 
        Партнер_2 = партнер("Сережа", "Петров",    м)
    ;
        Партнер_1 = партнер("Инна",   "Крымова",   ж), 
        Партнер_2 = партнер("Дима",   "Крымов",    м)
    ;
        Партнер_1 = партнер("Аня",    "Воробьева", ж), 
        Партнер_2 = партнер("Юра",    "Воробьев",  м)
    .

%поиск по списку
    входит_в(Элемент, [ Первый | _ ])
    :-
        Элемент = Первый
    .
    входит_в(Элемент, [ _ | Хвост_списка ])
    :-
        входит_в(Элемент, Хвост_списка)
    .
%поиск соответствующего номера в списке
    найти_номер_в_списке_по_росту(Партнер, [ Первый | Хвост_списка ], Счетчик, Номер)
    :-
        not(Партнер = Первый),
        Счетчик_1 = Счетчик + 1,
        найти_номер_в_списке_по_росту(Партнер, Хвост_списка, Счетчик_1, Номер)
    .
    найти_номер_в_списке_по_росту(Партнер, [ Партнер | _ ], Счетчик, Счетчик).

    условие_по_росту(пара(Девушка, Парень))
    :-
        список_партнеров_по_росту(Список),
        найти_номер_в_списке_по_росту(Девушка, Список, 1, Номер_1),
        найти_номер_в_списке_по_росту(Парень,  Список, 1, Номер_2),
        Номер_1 < Номер_2
    .

    проверка_условия_по_росту([]).
    проверка_условия_по_росту([ Пара | Хвост_списка ])
    :-
        условие_по_росту(Пара),
        проверка_условия_по_росту(Хвост_списка)
    .

    условие_отсутствия_пар_брат_и_сестра(пара(Девушка, Парень))
    :-
        not(родственники(Девушка, Парень))
    .

    проверка_отсутствия_пар_брат_и_сестра([]).
    проверка_отсутствия_пар_брат_и_сестра([ Пара | Хвост_списка ])
    :-
        условие_отсутствия_пар_брат_и_сестра(Пара),
        проверка_отсутствия_пар_брат_и_сестра(Хвост_списка)
    .

%генерация и проверка гипотезы
    генерация_и_проверка_гипотезы(Список_пар)
    :-
        % генерация гипотезы
        возможный_партнер(Партнер_1, ж),
        возможный_партнер(Партнер_2, ж),
        возможный_партнер(Партнер_3, ж),
        возможный_партнер(Партнер_4, ж),
        not(Партнер_1 = Партнер_2), not(Партнер_1 = Партнер_3), not(Партнер_1 = Партнер_4),
        not(Партнер_2 = Партнер_3), not(Партнер_2 = Партнер_4),
        not(Партнер_3 = Партнер_4),

        Список_пар =
        [
            пара(партнер("Люся", "Егорова",   ж), Партнер_1), 
            пара(партнер("Оля",  "Петрова",   ж), Партнер_2),
            пара(партнер("Инна", "Крымова",   ж), Партнер_3), 
            пара(партнер("Аня",  "Воробьева", ж), Партнер_4)
        ],

        %проверка_гипотезы
        проверка_условия_по_росту(Список_пар),
        проверка_отсутствия_пар_брат_и_сестра(Список_пар)
    .
    поиск_решения(Список_пар)
    :-
        write("Возможные варианты:"), nl,
        генерация_и_проверка_гипотезы(Список_пар), nl
    .
GOAL
    поиск_решения(Пара).
