/*Как сейчас, помню, — начал Белый Рыцарь, — мне довелось быть на одном судебном процессе, на который не смог попасть Бармаглот.
Как это обычно у нас бывает, подсудимых было трое, а виновным из них был только один.
Когда первого подсудимого спросили, признает ли он себя виновным, то ответ был кратким: то ли «да», то ли «нет», хотя что именно, я сейчас не припомню.
Затем спросили второго подсудимого, признает ли он себя виновным. Ответ также был односложным: то ли «да», то ли «нет», хотя что именно, я также не помню.
Затем спросили третьего подсудимого, виновен или невиновен первый подсудимый, и третий подсудимый либо ответил, что первый подсудимый невиновен, либо утверждал,
что первый подсудимый виновен. Но что именно ответил третий подсудимый, истерлось из моей памяти. Есть ли у тебя хотя бы малейшее представление о том, кто виновен? 
— Разумеется, нет! — ответила Алиса. 
— Я тоже не сумел определить виновного, — признался Белый Рыцарь.—Зато я помню еще кое-что: 
я запамятовал, кто из подсудимых говорил правду и кто лгал, но хорошо помню, что по крайней мере один из них говорил правду и по крайней мере один из них лгал.
Можешь ли ты теперь определить, кто виновен? 
— Разумеется, нет! —ответила Алиса. 
— Я тоже не сумел определить виновного, —сказал Белый Рыцарь,—но, если это тебе хоть как-то поможет, позволь мне сообщить тебе, что на прошлой неделе я повстречал Бармаглота,
который принялся расспрашивать меня о процессе. В то время я еще помнил, что именно говорил каждый обвиняемый, и пересказал Бармаглоту показания всех подсудимых.
Кроме того, я сообщил Бармаглоту, что по крайней мере один из трех подсудимых говорил правду и по крайней мере один лгал.
Узнав об этом, Бармаглот путем логических умозаключений сумел найти виновного. 
Теперь уже у Алисы (и, следовательно, у вас) имеется достаточно информации для того, чтобы решить задачу. 
Кто виновен?*/
DOMAINS
        номер, количество = integer
        вина, ответ, честность = symbol
        список_показаний = ответ*
        подсудимый = подсудимый(номер, ответ, вина, честность)
        список_подсудимых = подсудимый*
        список_решений = список_подсудимых*
PREDICATES
        nondeterm возможная_вина(вина)
        nondeterm возможное_показание(ответ)
        nondeterm ответ(ответ, вина)
        nondeterm возможная_честность(честность)
        nondeterm найти(список_подсудимых, подсудимый)
        nondeterm найти_показание(список_показаний, номер, ответ)
        nondeterm сказал(номер, ответ, вина, честность, список_подсудимых)
        nondeterm проверка_показания(список_подсудимых, номер)
        nondeterm количество_виновных(список_подсудимых, количество)
        nondeterm количество_по_честности(список_подсудимых, количество, честность)
        nondeterm условие_о_количестве_виновных(список_подсудимых)
        nondeterm условие_о_количестве_честных_и_лжецов(список_подсудимых)
        nondeterm генерация_гипотезы(список_показаний, список_подсудимых)
        nondeterm поиск_множества_решений(список_показаний, список_решений)
        nondeterm поиск_дублей(список_решений)
        nondeterm итоговая_гипотеза(список_подсудимых)
        nondeterm поиск_решения(номер)
CLAUSES               
        %Определяем возможную вину подсудимых
        возможная_вина(виновен).
        возможная_вина(невиновен).        
%-----------------------------------            
        %Определяем возможное показание
        возможное_показание(да).
        возможное_показание(нет).        
%-----------------------------------             
        %Определяем возможную честность подсудимых
        возможная_честность(честный).
        возможная_честность(лжец).        
%-----------------------------------     
        %Определяем поиск подсудимого из списка
        найти([Первый|_], Первый).
        найти([_|Хвост_списка], Первый):- найти(Хвост_списка, Первый).
%-----------------------------------     
        %Определяем поиск показания из списка по номеру
        найти_показание([Первый|_], Номер, Первый):- Номер - 1 = 0.
        найти_показание([_|Хвост_списка], Номер, Первый):- Номер_1 = Номер - 1,
                                                           найти_показание(Хвост_списка, Номер_1, Первый).                                                   
	                             
%-----------------------------------
        %Определяем показания
        сказал(1, Сказал, Вина, Честность, Подсудимые) :- найти(Подсудимые, подсудимый(1, Сказал, Вина, Честность)).
        
        сказал(2, Сказал, Вина, Честность, Подсудимые) :- найти(Подсудимые, подсудимый(2, Сказал, Вина, Честность)).
        
        сказал(3, Сказал, Вина, Честность, Подсудимые) :- найти(Подсудимые, подсудимый(1, _, Вина, _)),
                                                          найти(Подсудимые, подсудимый(3, Сказал, _, Честность)).                                                 
	                             
%-----------------------------------
        %Определяем расшифровку высказывания
        ответ(да, виновен).
        ответ(нет, невиновен).
        
%-----------------------------------
        %Определяем проверку показаний
        проверка_показания(Подсудимые, Номер):- сказал(Номер, Сказал, Вина, честный, Подсудимые),
                                                ответ(Сказал, Обвинение),
	                                        Вина = Обвинение.
        проверка_показания(Подсудимые, Номер):- сказал(Номер, Сказал, Вина, лжец, Подсудимые),
                                                ответ(Сказал, Обвинение),
	                                        not(Вина = Обвинение).

%-----------------------------------
        %Определяем счетчик виновных подсудимых
	количество_виновных([], 0).
	количество_виновных([Первый|Хвост_списка], Количество):- количество_виновных(Хвост_списка, Количество_1),
	                                                         Первый = подсудимый(_, _, виновен, _),
	                                                         Количество = Количество_1 + 1.
	количество_виновных([Первый|Хвост_списка], Количество):- количество_виновных(Хвост_списка, Количество_1),
	                                                         Первый = подсудимый(_, _, невиновен, _),
	                                                         Количество = Количество_1.
%-----------------------------------
        %Определяем условие о количестве виновных
        условие_о_количестве_виновных(Подсудимые):- количество_виновных(Подсудимые, Количество), Количество=1.
%-----------------------------------
        %Определяем счетчик честных и лживых подсудимых
	количество_по_честности([], 0, _).
	количество_по_честности([Первый|Хвост_списка], Количество, Честность):- количество_по_честности(Хвост_списка, Количество_1, Честность),
	                                                                        Первый = подсудимый(_, _, _, Честность),
	                                                                        Количество = Количество_1 + 1.
	количество_по_честности([Первый|Хвост_списка], Количество, Честность):- количество_по_честности(Хвост_списка, Количество_1, Честность),
	                                                                        not(Первый = подсудимый(_, _, _, Честность)),
	                                                                        Количество = Количество_1.
%-----------------------------------
        %Определяем условие о количестве честных и лжецов
        условие_о_количестве_честных_и_лжецов(Подсудимые):- количество_по_честности(Подсудимые, Количество_1, честный),
                                                            количество_по_честности(Подсудимые, Количество_2, лжец),
                                                            not(Количество_1 = 0), not(Количество_2 = 0).
%-----------------------------------                
        %Определяем генерацию гипотезы и ее проверку
        генерация_гипотезы(Показания, Подсудимые):-
		возможная_вина(Вина_1),
		возможная_вина(Вина_2),
		возможная_вина(Вина_3),
		
		возможная_честность(Честность_1),
		возможная_честность(Честность_2),
		возможная_честность(Честность_3),
		
		найти_показание(Показания, 1, Сказал_1),
		найти_показание(Показания, 2, Сказал_2),
		найти_показание(Показания, 3, Сказал_3),
		
		Подсудимые = [подсудимый(1, Сказал_1, Вина_1, Честность_1),
		              подсудимый(2, Сказал_2, Вина_2, Честность_2),
		              подсудимый(3, Сказал_3, Вина_3, Честность_3)],
		%Проверка
		условие_о_количестве_виновных(Подсудимые),
		условие_о_количестве_честных_и_лжецов(Подсудимые),
		проверка_показания(Подсудимые, 1),
		проверка_показания(Подсудимые, 2),
		проверка_показания(Подсудимые, 3).
%-----------------------------------                
        %Определяем список удачных гипотез
        поиск_множества_решений(Показания, Список_гипотез):-
                findall(
                        Гипотезы,
                        генерация_гипотезы(Показания, Гипотезы),
                        Список_гипотез
                       ).
%-----------------------------------
        %Определяем итоговые гипотезы(находим те списки, в которых есть только одна гипотеза)
        итоговая_гипотеза(Гипотеза):-
		возможное_показание(Сказал_1),
		возможное_показание(Сказал_2),
		возможное_показание(Сказал_3),
		
                Показания = [Сказал_1, Сказал_2, Сказал_3],
                поиск_множества_решений(Показания, Список_гипотез),
                Список_гипотез = [Гипотеза]. %решение должно быть единственным
%-----------------------------------                
        %Определяем список итоговых гипотез(может быть несколько гипотез с одинаковыми виновными)
        поиск_дублей(Список_дублей):-
                findall(
                        Гипотеза,
                        итоговая_гипотеза(Гипотеза),
                        Список_дублей
                       ).
%-----------------------------------
        %Определяем определяем поиск виновного из итоговой гипотезы
        поиск_решения(Номер):-
                поиск_дублей(Список_дублей),
                Список_дублей = [Гипотеза|_],   %----------------------->(можем выбрать любую гипотезу из списка, т.к. виновные одинаковые)
                найти(Гипотеза, подсудимый(Номер, _, виновен, _)).         % если бы виновные были бы не одинаковыми, задача бы не решалась
GOAL
       поиск_решения(Виновен_подсудимый_номер).
        
        
        
        
        
        
        
        
        
        
        