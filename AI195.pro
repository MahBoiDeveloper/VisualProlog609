/*Задача №195    ПРЕСТУПНИКИ-РЕЦИДИВИСТЫ
  Три преступника-рецидивиста, подозреваемые в ограблении лавки, вызваны на допрос. Установлено следующее:
  1. Каждый из тройки подозреваемых А, В и С в день ограбления побывал в лавке, и никто больше в тот день в лавку не заходил;
  2. Если А виновен, то у него был ровно один сообщник;
  3. Если В не виновен, то С также не виновен;
  4. Если виновны ровно двое подозреваемых, то А - один из них;
  5. Если С не виновен, то В также не виновен.
  Против кого выдвинуто обвинение?    */
DOMAINS 
    имя               = symbol 
    имена             = имя* 
    вина              = виновен; не_виновен 
    подозреваемый     = подозреваемый(имя,вина) 
    подозреваемые     = подозреваемый*
    номер_утверждения = integer
PREDICATES
    nondeterm решение_без_повторов (имена, имена, имена)
    nondeterm один_из              (имя, имена)  
    nondeterm входит_в             (подозреваемый, подозреваемые)
    nondeterm количество           (имена, integer) 
    nondeterm возможная_вина       (вина)
    nondeterm генерация_гипотезы   (подозреваемые)
    nondeterm проверка_гипотезы    (подозреваемые)
    nondeterm утверждение          (номер_утверждения,подозреваемые)
    nondeterm поиск_решения        (имя)
    nondeterm поиск_обвиняемого    (имена)
CLAUSES       
    один_из(Элемент, [ Первый | _ ])
    :-
        Элемент = Первый
    .
    один_из(Элемент, [ Первый | Остальные ])
    :-
        not(Элемент = Первый),
        один_из(Элемент, Остальные)
    .

    решение_без_повторов([], Накопитель, СписокБезПовторов)
    :-
        СписокБезПовторов = Накопитель
    .
    решение_без_повторов([ ПервыйЭлемент | ОстальныеЭлементы ], Накопитель, СписокБезПовторов)
    :-
        один_из(ПервыйЭлемент, Накопитель), 
        решение_без_повторов(ОстальныеЭлементы, Накопитель, СписокБезПовторов)
    .
    решение_без_повторов([ ПервыйЭлемент | ОстальныеЭлементы ], Накопитель, СписокБезПовторов)
    :-
          not(один_из(ПервыйЭлемент, Накопитель)),
          решение_без_повторов(ОстальныеЭлементы, [ ПервыйЭлемент | Накопитель ], СписокБезПовторов)
    .

    входит_в(Подозреваемый, [ Подозреваемый | _ ]).
    входит_в(Подозреваемый, [ _ | Хвост_Списка_Подозреваемых ])
    :-
        входит_в(Подозреваемый, Хвост_Списка_Подозреваемых)
    .
    
    количество([], 0).
    количество([ _Первый | Хвост_количества ], Количество)
    :-
        количество(Хвост_количества, КоличествоОстальных),
        Количество = КоличествоОстальных + 1
    .
    
    возможная_вина(виновен).
    возможная_вина(не_виновен).
%% Генерация гипотезы    
    генерация_гипотезы(Подозреваемые)
    :-
        возможная_вина(ВинаА), 
        возможная_вина(ВинаВ),
        возможная_вина(ВинаС),
        % 1. Каждый из тройки подозреваемых А, В и С в день ограбления побывал в лавке, и никто больше в тот день в лавку не заходил;
        Подозреваемые =
        [
            подозреваемый(а, ВинаА), 
            подозреваемый(в, ВинаВ), 
            подозреваемый(с, ВинаС)
        ]
    .
             
% 2. Если А виновен, то у него был ровно один сообщник;             
    утверждение(2, Подозреваемые)
    :- 
        входит_в(подозреваемый(а, виновен), Подозреваемые),
        findall
        (
            Имя, 
            входит_в(подозреваемый(Имя, виновен), Подозреваемые), 
            Виновные
        ), 
        количество(Виновные, ЧислоВиновных),
        ЧислоВиновных = 2
    ;
        входит_в(подозреваемый(а, не_виновен), Подозреваемые)
    .
                      
% 3. Если В не виновен, то С также не виновен;
    утверждение(3, Подозреваемые)
    :-
        входит_в(подозреваемый(в ,не_виновен), Подозреваемые), 
        входит_в(подозреваемый(с, не_виновен), Подозреваемые)
    ;
        входит_в(подозреваемый(в, виновен),    Подозреваемые)
    .
    
% 4. Если виновны ровно двое подозреваемых, то А - один из них;
    утверждение(4, Подозреваемые)
    :- 
        findall
        (
            Имя, 
            входит_в(подозреваемый(Имя, виновен), Подозреваемые), 
            Виновные
        ),
        количество(Виновные,КоличествоВиновных), 
        КоличествоВиновных = 2,
        входит_в(подозреваемый(а, виновен), Подозреваемые)
    ;
        findall
        (
            Имя, 
            входит_в(подозреваемый(Имя, виновен), Подозреваемые), 
            Виновные
        ),
        количество(Виновные, КоличествоВиновных), 
        not(КоличествоВиновных = 2)
    .
    
% 5. Если С не виновен, то В также не виновен.
    утверждение(5, Подозреваемые)
    :-
        входит_в(подозреваемый(с, не_виновен), Подозреваемые),
        входит_в(подозреваемый(в, не_виновен), Подозреваемые)
    ;
        входит_в(подозреваемый(с, виновен),    Подозреваемые)
    .
                 
    проверка_гипотезы(Подозреваемые)
    :- 
       генерация_гипотезы(Подозреваемые),
        утверждение(2,Подозреваемые),  
        утверждение(3,Подозреваемые),
        утверждение(4,Подозреваемые),
        утверждение(5,Подозреваемые)
    .
            
    поиск_решения(Имя)
    :-
        проверка_гипотезы(Подозреваемые),
        входит_в(подозреваемый(Имя, виновен), Подозреваемые)
    .
                 
    поиск_обвиняемого(РазныеРешения)
    :-
        findall
        (
            ИмяОбвиняемого, 
            поиск_решения(ИмяОбвиняемого), 
            ВсеРешения
        ),
        решение_без_повторов(ВсеРешения, [], РазныеРешения)
    .
                    
GOAL    
    поиск_обвиняемого(Выдвинуто_обвинение_против).
