/*				Кто сразится с грифоном?

Даже в такой спокойной и любимой богами стране, как Гиперборея, иногда возникали
серьезные проблемы. Одной из таких проблем стал неизвестно откуда взявшийся грифон
– чудовище с головой льва и крыльями орла, пугавшее людей и пожиравшее скот.
Три пастуха решают, кому из них предстоит сразиться с грифоном. Один из них –
сорореанец, который всегда говорит правду, второй – норореанец, который всегда лжет, а
третий – мидрореанец, который говорит правду и лжет через раз, но первый ответ может
быть и правдой, и ложью. Вот что они говорят:
 
А: 1. Б не может сражаться с чудовищем – у него даже копья нет.
   2. В свалится в обморок при одном виде грифона.
   3. Я – единственный, кто может сразиться с чудовищем.
Б: 1. У меня есть копье.
   2. Я – сорореанец.
   3. В никогда нельзя верить.
   4. Сражаться с чудовищем буду я.
В: 1. Я не упаду в обморок при виде грифона.
   2. Я – мидрореанец.
   3. Б – сорореанец.
   4. Я согласен с третьим высказыванием А.

К счастью для всех, Юпитер решил вмешаться. Махнув рукой, он уменьшил грифона так,
что страшное чудовище стало меньше мышки. Наши герои легко прогнали его. Но кто же
из них из какого племени?
*/

DOMAINS
    имя, племя, готовность, копье, обморок, истинность = symbol
    пастух                                             = пастух(имя, племя, готовность, копье, обморок)
    пастухи                                            = пастух*
    список_гипотез                                     = пастухи*
    номер                                              = integer

PREDICATES
    nondeterm возможное_племя             (племя)
    nondeterm возможная_готовность        (готовность)
    nondeterm возможное_копье             (копье)
    nondeterm возможный_обморок           (обморок)
    nondeterm возможная_истинность        (истинность)
    nondeterm входит_в                    (пастух, пастухи)
    nondeterm входит_в                    (пастухи, список_гипотез)
    nondeterm сказал                      (номер, имя, пастухи)
    nondeterm проверка                    (номер, пастух, пастухи, истинность)
    nondeterm генерация_гипотезы          (пастухи)
    nondeterm проверка_гипотезы           (пастухи)
    nondeterm итоговые_гипотезы           (пастухи)
    nondeterm соотнести_имена_и_племена   (пастухи, пастухи)
    nondeterm нет_соотносимых_гипотез     (пастухи, список_гипотез)
    nondeterm отсев_повторов              (список_гипотез, список_гипотез)
    nondeterm список_решений_без_повторов (список_гипотез)
    nondeterm решение                     (имя, племя)
    
CLAUSES
    возможное_племя(сорореанец).
    возможное_племя(норореанец).
    возможное_племя(мидрореанец).

    возможная_готовность(может).
    возможная_готовность(не_может).

    возможное_копье(есть_копье).
    возможное_копье(нет_копья).

    возможный_обморок(свалится).
    возможный_обморок(не_свалится).

    % возможная истинность первого высказывания мидрореанца
    возможная_истинность(правда).
    возможная_истинность(ложь).
    % поиск по списку
    входит_в(Первый, [Первый | _]).
    входит_в(Первый, [_ | Хвост])
    :-
        входит_в(Первый, Хвост)
    .
    
    % Описание высказываний из условия
    % А: 1. Б не может сражаться с чудовищем – у него даже копья нет.
    сказал(1, "А", Пастухи)
    :-
        входит_в(пастух("Б",_,не_может,нет_копья,_), Пастухи)
    .
    % А: 2. В свалится в обморок при одном виде грифона.
    сказал(2, "А", Пастухи)
    :-
        входит_в(пастух("В",_,_,_,свалится), Пастухи)
    .    
    % А: 3. Я – единственный, кто может сразиться с чудовищем.
    сказал(3, "А", Пастухи)
    :-
        входит_в(пастух("А",_,может,_,_), Пастухи)
    .
    
    % Б: 1. У меня есть копье.
    сказал(1, "Б", Пастухи)
    :-
        входит_в(пастух("Б",_,_,есть_копье,_), Пастухи)
    .
    % Б: 2. Я – сорореанец.
    сказал(2, "Б", Пастухи)
    :-
        входит_в(пастух("Б",сорореанец,_,_,_), Пастухи)
    .
    % Б: 3.В никогда нельзя верить.
    сказал(3, "Б", Пастухи)
    :-
        not(сказал(1, "В", Пастухи)),
        not(сказал(2, "В", Пастухи)),
        not(сказал(3, "В", Пастухи)),
        not(сказал(4, "В", Пастухи))
    .
    % Б: 4. Сражаться с чудовищем буду я.
    сказал(4, "Б", Пастухи)
    :-
        входит_в(пастух("Б",_,может,_,_), Пастухи)
    .

    % В: 1. Я не упаду в обморок при виде грифона.
    сказал(1, "В", Пастухи)
    :-
        входит_в(пастух("В",_,_,_,не_свалится), Пастухи)
    .
    % В: 2. Я – мидрореанец.
    сказал(2, "В", Пастухи)
    :-
        входит_в(пастух("В",мидрореанец,_,_,_), Пастухи)
    .
    % В: 3. Б – сорореанец.
    сказал(3, "В", Пастухи)
    :-
        входит_в(пастух("Б",сорореанец,_,_,_), Пастухи)
    .
    % В: 4. Я согласен с третьим высказыванием А.
    сказал(4, "В", Пастухи)
        :- сказал(3, "А", Пастухи)
    .
   
   % Проверка условий через племя
    проверка(Номер, пастух(Имя, сорореанец, _,_,_), Пастухи, _)
    :-
        сказал(Номер, Имя, Пастухи)
    .
        
    проверка(Номер, пастух(Имя, норореанец, _,_,_), Пастухи, _)
    :-
        not(сказал(Номер, Имя, Пастухи))
    .

    проверка(Номер, пастух(Имя, мидрореанец, _,_,_), Пастухи, правда)
    :-
        сказал(Номер, Имя, Пастухи)
    .
    проверка(Номер, пастух(Имя, мидрореанец, _,_,_), Пастухи, ложь)  
    :-
        not(сказал(Номер, Имя, Пастухи))
    .

    % Генерация гипотезы
    генерация_гипотезы(Пастухи)
    :-
        возможное_племя(Племя_1),
        возможное_племя(Племя_2), not(Племя_1 = Племя_2),
        возможное_племя(Племя_3), not(Племя_1 = Племя_3), not(Племя_2 = Племя_3),

        возможная_готовность(Готовность_1),
        возможная_готовность(Готовность_2),
        возможная_готовность(Готовность_3),

        возможное_копье(Копье_1),
        возможное_копье(Копье_2),
        возможное_копье(Копье_3),

        возможный_обморок(Обморок_1),
        возможный_обморок(Обморок_2),
        возможный_обморок(Обморок_3),

        Пастухи = 
        [
            пастух("А", Племя_1, Готовность_1, Копье_1, Обморок_1),
            пастух("Б", Племя_2, Готовность_2, Копье_2, Обморок_2),
            пастух("В", Племя_3, Готовность_3, Копье_3, Обморок_3)
        ]
    .

    % проверить гипотезу
    проверка_гипотезы(Пастухи)
    :-
        Пастухи = [Пастух_1, Пастух_2, Пастух_3],

        % если пастух окажется мидрореанцом, 
        % то для него должна чередоваться истинность его высказываний
        возможная_истинность(Истинность_высказывания_мидорианца),
        возможная_истинность(Противоположная_истинность),
        not(Противоположная_истинность = Истинность_высказывания_мидорианца),
        
        проверка(1, Пастух_1, Пастухи, Истинность_высказывания_мидорианца),
        проверка(2, Пастух_1, Пастухи, Противоположная_истинность),
        проверка(3, Пастух_1, Пастухи, Истинность_высказывания_мидорианца),

        проверка(1, Пастух_2, Пастухи, Истинность_высказывания_мидорианца),
        проверка(2, Пастух_2, Пастухи, Противоположная_истинность),
        проверка(3, Пастух_2, Пастухи, Истинность_высказывания_мидорианца),
        проверка(4, Пастух_2, Пастухи, Противоположная_истинность),

        проверка(1, Пастух_3, Пастухи, Истинность_высказывания_мидорианца),
        проверка(2, Пастух_3, Пастухи, Противоположная_истинность),
        проверка(3, Пастух_3, Пастухи, Истинность_высказывания_мидорианца),
        проверка(4, Пастух_3, Пастухи, Противоположная_истинность)
    .

    % сравнить две гипотезы по первым двум свойствам (имя и племя) соответствующих пастухов
    % (соответствие определяется местом в гипотезе)
    итоговые_гипотезы(Пастухи)
    :-
        генерация_гипотезы(Пастухи),
        проверка_гипотезы(Пастухи)
    . 

    соотнести_имена_и_племена([], []).
    соотнести_имена_и_племена([Пастух | Хвост_списка], [Пастух_1 | Хвост_списка_1])
    :-
        соотнести_имена_и_племена(Хвост_списка, Хвост_списка_1),
        Пастух   = пастух(Имя, Племя, _,_,_),
        Пастух_1 = пастух(Имя, Племя, _,_,_)
    .

    % гипотеза будет уникальной, если нет больше такой гипотезы,
    % в которой у соответствующих пастухов такие же имена и племена
    нет_соотносимых_гипотез(_, []).
    нет_соотносимых_гипотез(Пастухи, [Пастухи_1 | Хвост_списка])
    :-
        нет_соотносимых_гипотез(Пастухи, Хвост_списка),
        not(соотнести_имена_и_племена(Пастухи, Пастухи_1))
    .

    % оставить уникальные решения
    отсев_повторов([], []). 
    отсев_повторов([Пастухи | Хвост_списка], Список)
    :- 
        отсев_повторов(Хвост_списка, Список_1),
        нет_соотносимых_гипотез(Пастухи, Список_1),
        Список = [Пастухи | Список_1]
    ;
        отсев_повторов(Хвост_списка, Список_1),
        not(нет_соотносимых_гипотез(Пастухи, Список_1)),
        Список = Список_1
    .

    % получить все уникальные решения
    список_решений_без_повторов(Список)
    :-
        findall
        (
            Пастухи,
            итоговые_гипотезы(Пастухи),
            Список_с_дублями
        ),
        отсев_повторов(Список_с_дублями, Список)
    .
    
    % вывести решение
    решение(Имя, Племя)
    :-
        список_решений_без_повторов(Список),
        входит_в(Пастухи, Список),
        входит_в(пастух(Имя, Племя, _,_,_), Пастухи)
    .

GOAL
    решение(Имя, Племя).