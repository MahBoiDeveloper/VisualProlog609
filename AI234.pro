/*
                Проблема Пожарника

В некотором месте есть только три деревни: Правдино, Кривдино и Серединка-Наполовинку.

Соответственно, жители первой всегда говорят правду,
жители второй - всегда лгут,
а в Серединке-Наполовинку жители говорят правду и лгут через раз.

Вы - пожарник, который сидит в пожарном участке, откуда этих трех
деревень не видно. Раздается телефонный звонок. Вы берете трубку:

- У нас в деревне пожар.
- А где вы живете?
- В Серединке-Наполовинку.

Спрашивается: куда ехать?
*/

DOMAINS
    номер                        = integer
    наличие_пожара, место_вызова = symbol
    список_мест                  = место_вызова*
    гипотеза                     = пожар(наличие_пожара, место_вызова)

PREDICATES
    nondeterm возможное_наличие_пожара           (наличие_пожара)
    nondeterm возможное_место_вызова             (место_вызова)
    nondeterm утверждение                        (номер, гипотеза)
    nondeterm проверить_утверждения              (гипотеза)
    nondeterm условие_для_пожарного              (гипотеза)
    nondeterm генерация_гипотезы                 (гипотеза)
    nondeterm проверка_гипотезы                  (гипотеза)
    nondeterm поиск_решения                      (место_вызова)
    nondeterm входит_в                           (место_вызова, список_мест)
    nondeterm отсеять_дубли                      (список_мест, список_мест)
    nondeterm получить_список_уникальных_решений (список_мест)
    nondeterm ответ                              (место_вызова)

CLAUSES
    возможное_наличие_пожара(есть).
    возможное_наличие_пожара(нет).
    
    % есть только три деревни: Правдино, Кривдино и Серединка-Наполовинку.
    возможное_место_вызова("Правдино").
    возможное_место_вызова("Кривдино").
    возможное_место_вызова("Серединка-Наполовинку").
    
    % У нас в деревне пожар.
    утверждение(1, Гипотеза)
    :-
        Гипотеза = пожар(есть, _)
    .

    % А где вы живете?  — В Серединке-Наполовинку.
    утверждение(2, Гипотеза)
    :-
        Гипотеза = пожар(_, "Серединка-Наполовинку")
    .

    % жители первой всегда говорят правду,
    проверить_утверждения(Гипотеза)
    :-
        Гипотеза = пожар(_, "Правдино"),
        утверждение(1, Гипотеза),
        утверждение(2, Гипотеза)
    .
    % жители второй - всегда лгут,
    проверить_утверждения(Гипотеза)
    :-
        Гипотеза = пожар(_, "Кривдино"),
        not(утверждение(1, Гипотеза)),
        not(утверждение(2, Гипотеза))
    .

    % а в Серединке-Наполовинку жители говорят правду и лгут через раз.
    проверить_утверждения(Гипотеза)
    :-
        Гипотеза = пожар(_, "Серединка-Наполовинку"),
        not(утверждение(1, Гипотеза)),
        утверждение(2, Гипотеза)
    ;    
        Гипотеза = пожар(_, "Серединка-Наполовинку"),
        утверждение(1, Гипотеза),
        not(утверждение(2, Гипотеза))
    .

    % пожарному не нужно выезжать на ложный вызов
    условие_для_пожарного(Гипотеза)
    :-
        Гипотеза = пожар(есть, _)
    .

    % гипотеза - предположение о пожаре, а именно: есть он или нет, а также из какой деревни поступил вызов
    % генерация гипотезы
    генерация_гипотезы(Гипотеза)
    :-
        возможное_наличие_пожара(Наличие_пожара),
        возможное_место_вызова(Место_вызова),
        Гипотеза = пожар(Наличие_пожара, Место_вызова)
    .

    % проверить соответствие гипотезы условиям
    проверка_гипотезы(Гипотеза)
    :-
        проверить_утверждения(Гипотеза),
        условие_для_пожарного(Гипотеза)
    .

    % найти места, куда пожарному нужно выезжать
    поиск_решения(Куда_надо_ехать)
    :-
        генерация_гипотезы(Гипотеза),
        проверка_гипотезы(Гипотеза),
        Гипотеза = пожар(_, Куда_надо_ехать)
    ;
        генерация_гипотезы(Гипотеза),
        not(проверка_гипотезы(Гипотеза)),
        Куда_надо_ехать = "Никуда_ехать_не_надо. Ложная тревога."
    .
    
    
    % поиск по списку
    входит_в(Элемент, [Первый | _])
    :-
        Элемент = Первый
    .
    входит_в(Элемент, [_ | Хвост])
    :-
        входит_в(Элемент, Хвост)
    .
    
    % отсеять уникальные элементы из переданного списка
    отсеять_дубли([], []).
    отсеять_дубли([Первый | Хвост], Уникальные_места)
    :-
        отсеять_дубли(Хвост, Уникальные_места_1),
        not(входит_в(Первый, Уникальные_места_1)),
        Уникальные_места = [Первый | Уникальные_места_1]
    ;
        отсеять_дубли(Хвост, Уникальные_места_1),
        входит_в(Первый, Уникальные_места_1),
        Уникальные_места = Уникальные_места_1
    .
    
    % получить список уникальных мест
    получить_список_уникальных_решений(Уникальные_места)
    :-
        findall
        (
            Место_вызова,
            поиск_решения(Место_вызова),
            Список_мест
        ),
        отсеять_дубли(Список_мест, Уникальные_места)
    .
    
    % определить куда нужно выезжать пожарнику
    ответ(Куда_надо_ехать)
    :-
        получить_список_уникальных_решений(Уникальные_места),
        входит_в(Куда_надо_ехать, Уникальные_места)
    .
    
GOAL
    ответ(Куда_надо_ехать).
