/*
                                Задача №188
Пятеро друзей решили записаться в кружок любителей логических задач:
    Андрей, Борис, Виктор, Григорий, Дмитрий.
Но староста кружка предложил им выдержать вступительный экзамен:
«Вы должны приходить к нам по возможности больше вечеров, однако в разных сочетаниях, 
соблюдая следующие условия:
1.  Если Андрей приходит вместе с Дмитрием, то Борис должен присутствовать
2.  Если Дмитрий отсутствует, то Борис должен быть, а Виктор пусть не приходит
3.  Андрей и Виктор не могут одновременно ни присутствовать, ни отсутствовать
4.  Если придет Дмитрий, то Григорий пусть не приходит
5.  Если Борис отсутствует, то Дмитрий должен присутствовать, но это в том случае, 
    если не присутствует Виктор. 
    Если же Виктор присутствует при отсутствии Бориса, то Дмитрий приходить не должен,
    а Григорий должен прийти».
Сколько вечеров и в каком составе друзья могли прийти?
*/

DOMAINS

    студент          = студент(имя, состояние)
    имя              = андрей; борис; виктор; григорий; дмитрий
    состояние        = присутствует; отсутствует
    список_студентов = студент*
    число            = integer
    список_списков   = список_студентов*

PREDICATES

    отсутствует                          (студент)
    присутствует                         (студент)

    nondeterm вероятное_состояние        (состояние)

    nondeterm условие                    (число, список_студентов)

    nondeterm найти                      (имя, список_студентов, студент) - (i,i,o)

    nondeterm подсчёт_количества_вечеров (список_списков, число)
    nondeterm вывод_каждого_вечера       (список_списков)
    nondeterm вывод_количества_вечеров   (число)

    nondeterm проверенная_гипотеза       (список_студентов)
    nondeterm поиск_решения              ()

CLAUSES

% служебные предикаты

    присутствует( студент(_,присутствует) ).
    отсутствует ( студент(_,отсутствует ) ).

    вероятное_состояние( отсутствует  ).
    вероятное_состояние( присутствует ).

    найти( _,[],_ ).
    найти
    (
        Имя,
        [ студент( _Имя, _Состояние ) | Хвост ],
        Студент
    )
    :-
        not( Имя = _Имя ),
        найти( Имя, Хвост, Студент );
        Имя = _Имя,
        Студент = студент( _Имя, _Состояние )
    .

    подсчёт_количества_вечеров( [], 0 ).
    подсчёт_количества_вечеров( [ _ | Остаток_списка ], Количество_вечеров )
    :-
        подсчёт_количества_вечеров( Остаток_списка, Общее_количество ),
        Количество_вечеров = Общее_количество + 1
    .

    вывод_каждого_вечера( [] ).
    вывод_каждого_вечера( [ Ответ | Остаток_списка ] )
    :-
        найти( андрей  , Ответ, Андрей   ),                                                            nl,
        Андрей   = студент( андрей, Состояние_андрея)     ,write( "Андрей   : ", Состояние_андрея   ), nl,
        найти( борис   , Ответ, Борис    ),
        Борис    = студент( борис , Состояние_бориса)     ,write( "Борис    : ", Состояние_бориса   ), nl,
        найти( виктор  , Ответ, Виктор   ),
        Виктор   = студент( виктор, Состояние_виктора)    ,write( "Виктор   : ", Состояние_виктора  ), nl,
        найти( григорий, Ответ, Григорий ),
        Григорий = студент( григорий, Состояние_григория) ,write( "Григорий : ", Состояние_григория ), nl,
        найти( дмитрий , Ответ, Дмитрий  ),
        Дмитрий  = студент( дмитрий , Состояние_дмитрия)  ,write( "Дмитрий  : ", Состояние_дмитрия  ), nl,
        вывод_каждого_вечера( Остаток_списка )
    .

    вывод_количества_вечеров( Количество_вечеров )
    :-
        write("Максимальное количество вечеров = ", Количество_вечеров),
        nl
    .

% описание утверждений из условий задачи/проверка гипотезы. 

% 1. Если Андрей приходит вместе с Дмитрием, то Борис должен присутствовать

    условие( 1, Список_студентов )
    :-
        найти( андрей , Список_студентов, Андрей  ),
        найти( дмитрий, Список_студентов, Дмитрий ),
        найти( борис  , Список_студентов, Борис   ),
        присутствует( Андрей  ),
        присутствует( Дмитрий ),
        присутствует( Борис   )
    .
    условие( 1, Список_студентов )
    :-
        найти( андрей, Список_студентов, Андрей  ),
        отсутствует( Андрей )
    .
    условие( 1, Список_студентов )
    :-
        найти( дмитрий, Список_студентов, Дмитрий ),
        отсутствует( Дмитрий )
    .

% 2. Если Дмитрий отсутствует, то Борис должен быть, а Виктор пусть не приходит

    условие( 2, Список_студентов )
    :-
        найти( дмитрий, Список_студентов, Дмитрий ),
        найти( борис  , Список_студентов, Борис   ),
        найти( виктор , Список_студентов, Виктор  ),
        отсутствует ( Дмитрий ),
        присутствует( Борис ),
        отсутствует ( Виктор )
    .
    условие( 2, Список_студентов )
    :-
        найти( дмитрий, Список_студентов, Дмитрий ),
        присутствует( Дмитрий )
    .

% 3. Андрей и Виктор не могут одновременно ни присутствовать, ни отсутствовать

    условие( 3, Список_студентов )
    :-
        найти( андрей, Список_студентов, Андрей ),
        найти( виктор, Список_студентов, Виктор ),
        присутствует( Андрей ),
        отсутствует ( Виктор )
    .
    условие( 3, Список_студентов )
    :-
        найти( андрей, Список_студентов, Андрей ),
        найти( виктор, Список_студентов, Виктор ),
        отсутствует ( Андрей ),
        присутствует( Виктор )
    .
% 4. Если придет Дмитрий, то Григорий пусть не приходит

    условие( 4, Список_студентов )
    :-
        найти( дмитрий , Список_студентов, Дмитрий ),
        найти( григорий, Список_студентов, Григорий ),
        присутствует( Дмитрий ),
        отсутствует ( Григорий )
    .
    условие( 4, Список_студентов )
    :-
        найти( дмитрий, Список_студентов, Дмитрий ),
        отсутствует( Дмитрий )
    .

% 5. Если Борис отсутствует, то Дмитрий должен присутствовать,
% но это в том случае, если не присутствует Виктор. 
% Если же Виктор присутствует при отсутствии Бориса,
% то Дмитрий приходить не должен, а Григорий должен прийти».
    
    условие( 5, Список_студентов )
    :-
        найти( борис  , Список_студентов, Борис ),
        найти( виктор , Список_студентов, Виктор ),
        найти( дмитрий, Список_студентов, Дмитрий ),
        отсутствует ( Борис ),
        отсутствует ( Виктор ),
        присутствует( Дмитрий )
    .
    условие( 5, Список_студентов )
    :-
        найти( борис   , Список_студентов, Борис ),
        найти( виктор  , Список_студентов, Виктор ),
        найти( дмитрий , Список_студентов, Дмитрий ),
        найти( григорий, Список_студентов, Григорий ),
        присутствует( Виктор ),
        отсутствует ( Борис ),
        отсутствует ( Дмитрий ),
        присутствует( Григорий )
    .
    условие( 5, Список_студентов )
    :-
        найти( борис   , Список_студентов, Борис ),
        найти( виктор  , Список_студентов, Виктор ),
        присутствует( Виктор ),
        присутствует( Борис )
    .
    условие( 5, Список_студентов )
    :-
        найти( борис   , Список_студентов, Борис ),
        найти( виктор  , Список_студентов, Виктор ),
        отсутствует ( Виктор ),
        присутствует( Борис )
    .
% генерация и проверка гипотезы
    проверенная_гипотеза( Список_студентов )
    :-
% генерация гипотезы
        вероятное_состояние( Состояние1 ),
        вероятное_состояние( Состояние2 ),
        вероятное_состояние( Состояние3 ),
        вероятное_состояние( Состояние4 ),
        вероятное_состояние( Состояние5 ),
        Список_студентов = 
        [
            студент( андрей  , Состояние1 ),
            студент( борис   , Состояние2 ),
            студент( виктор  , Состояние3 ),
            студент( григорий, Состояние4 ),
            студент( дмитрий , Состояние5 )
        ],
% проверка гипотезы
        условие( 1 , Список_студентов ),
        условие( 2 , Список_студентов ),
        условие( 3 , Список_студентов ),
        условие( 4 , Список_студентов ),
        условие( 5 , Список_студентов )
    .

% поиск решения
    поиск_решения()
    :-
        findall
        (
            Список_студентов,
            проверенная_гипотеза( Список_студентов ),
            Список_решений
        ),
        подсчёт_количества_вечеров( Список_решений, Количество_вечеров ),
        вывод_количества_вечеров( Количество_вечеров ),
        вывод_каждого_вечера( Список_решений ),
        nl
    .

GOAL
    поиск_решения().
