/*Из офиса деревенской фирмы «Седла и Сбруя» начали пропадать выставочные седла для козлопотамов.
Удалось установить, что все кражи – дело рук одного вора, вероятно, сотрудника фирмы.
Задержано четыре подозреваемых – все они были в офисе в день последней кражи.
Каждый из подозреваемых сделал по три утверждения.
Не все утверждения – правда, причем число правдивых высказываний у всех четырех подозреваемых разное.
    А: 1. Виновен Б.
       2. Я в день кражи был на рыбалке.
       3. Никто не назовет меня виновным.

    Б: 1. А лжет. Я невиновен.
       2. Я был в офисе в дни всех краж.
       3. Виновен Г.

    В: 1. Первое высказывание Б – правда.       
       2. Я согласен с первым высказыванием А.
       3. Я невиновен.  

    Г: 1. А врет, что был на рыбалке.
       2. Все высказывания В – ложь.
       3. Мне бы даже в голову не пришло что-то украсть. 
 
 Кто же вор?*/
DOMAINS
    имя, вина, истинность = symbol
    количество = integer    
    человек = человек(имя, вина)
    подозреваемые=человек*
    список_истинности = истинность*
    список_всех_истинностей = список_истинности*
PREDICATES 
    nondeterm входит_в(человек, подозреваемые)
    nondeterm входит_в(список_истинности, список_всех_истинностей)
    nondeterm истинность_конкретного_высказывания(количество, истинность, список_истинности)
    nondeterm подсчет_количества_по_признаку(список_истинности, истинность, количество)
    nondeterm возможная_вина(вина)
    nondeterm возможная_истинность(истинность)
    nondeterm возможный_список_истинности_показаний(список_истинности)
    nondeterm проверка_количества_истинных_показаний(список_всех_истинностей)
    nondeterm сказал(имя, количество, подозреваемые)
    nondeterm проверить_показание(имя, количество, подозреваемые, список_истинности) 
    nondeterm проверить_все_показания_одного_подозреваемого(имя, подозреваемые, список_истинности)
    nondeterm дело_рук_одного_вора(подозреваемые, количество)    
    nondeterm генерация_гипотезы(подозреваемые)
    nondeterm кто_же_вор(имя)
    
CLAUSES
    входит_в(Первый,[Первый|_]).
    входит_в(Первый,[_|Хвост]):-входит_в(Первый,Хвост).
%++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    истинность_конкретного_высказывания(Номер, Первый, [Первый|_]) :- Номер - 1 = 0.
    истинность_конкретного_высказывания(Номер, Первый, [_|Хвост]) :- Номер_1 = Номер - 1,
                                            истинность_конкретного_высказывания(Номер_1, Первый, Хвост).
%++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++   
    подсчет_количества_по_признаку([], _, 0).
    подсчет_количества_по_признаку([Первый|Хвост_списка], Признак, Количество):-

	    подсчет_количества_по_признаку(Хвост_списка, Признак, Количество_1),
	    Первый = Признак,
	    Количество = Количество_1 + 1.

    подсчет_количества_по_признаку([Первый|Хвост_списка], Признак, Количество):-

	    подсчет_количества_по_признаку(Хвост_списка, Признак, Количество_1),
	    not(Первый = Признак),
	    Количество = Количество_1.
%++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
    возможная_вина(виновен).
    возможная_вина(невиновен).
%++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
    возможная_истинность(правдиво).
    возможная_истинность(ложно).
%++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    возможный_список_истинности_показаний(Список) :-

        возможная_истинность(Истинность_1), возможная_истинность(Истинность_2), возможная_истинность(Истинность_3),
        Список = [Истинность_1, Истинность_2, Истинность_3].
%++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    проверка_количества_истинных_показаний(Список_списков) :-

        входит_в(Список_1, Список_списков),
        входит_в(Список_2, Список_списков),
        входит_в(Список_3, Список_списков),
        входит_в(Список_4, Список_списков),

        not(Список_1 = Список_2), not(Список_1 = Список_3), not(Список_1 = Список_4),
        not(Список_2 = Список_3), not(Список_2 = Список_4),
        not(Список_3 = Список_4),

   % Не все утверждения – правда, причем число правдивых высказываний у всех четырех подозреваемых разное.
        подсчет_количества_по_признаку(Список_1, правдиво, 0),
        подсчет_количества_по_признаку(Список_2, правдиво, 1),
        подсчет_количества_по_признаку(Список_3, правдиво, 2),
        подсчет_количества_по_признаку(Список_4, правдиво, 3).
%++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    % А
    % Виновен Б. 
    сказал("А", 1, Подозреваемые) :- входит_в(человек("Б", виновен), Подозреваемые).
    % Я в день кражи был на рыбалке.
    сказал("А", 2, Подозреваемые) :- not(входит_в(человек("А", виновен), Подозреваемые)).
    % Никто не назовет меня виновным. 
    сказал("А", 3, Подозреваемые) :- входит_в(человек("А", невиновен), Подозреваемые).

    % Б
    % А лжет. Я невиновен. 
    сказал("Б", 1, Подозреваемые) :- not(сказал("А", 1, Подозреваемые)).
    % Я был в офисе в дни всех краж.
    сказал("Б", 2, Подозреваемые) :- not(входит_в(человек("Б", виновен), Подозреваемые)).
    % Виновен Г. 
    сказал("Б", 3, Подозреваемые) :- входит_в(человек("Г", виновен), Подозреваемые).

    % В
    % Первое высказывание Б – правда. 
    сказал("В", 1, Подозреваемые) :- сказал("Б", 1, Подозреваемые).
    % Я согласен с первым высказыванием А. 
    сказал("В", 2, Подозреваемые) :- сказал("А", 1, Подозреваемые).
    % Я невиновен.
    сказал("В", 3, Подозреваемые) :- входит_в(человек("В", невиновен), Подозреваемые).
    
    % Г
    % А врет, что был на рыбалке. 
    сказал("Г", 1, Подозреваемые) :- not(сказал("А", 2, Подозреваемые)).
    % Все высказывания В – ложь.
    сказал("Г", 2, Подозреваемые) :- not(сказал("В", 1, Подозреваемые)),
                                     not(сказал("В", 2, Подозреваемые)),
                                     not(сказал("В", 3, Подозреваемые)).
    % Мне бы даже в голову не пришло что-то украсть. 
    сказал("Г", 3, Подозреваемые) :- входит_в(человек("Г", невиновен), Подозреваемые).
%++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    проверить_показание(Имя, Номер, Подозреваемые, Список_истинности_показаний) :-
        сказал(Имя, Номер, Подозреваемые),
        истинность_конкретного_высказывания(Номер, правдиво, Список_истинности_показаний).

    проверить_показание(Имя, Номер, Подозреваемые, Список_истинности_показаний) :-
        not(сказал(Имя, Номер, Подозреваемые)),
        истинность_конкретного_высказывания(Номер, ложно, Список_истинности_показаний).
%++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    проверить_все_показания_одного_подозреваемого(Имя, Подозреваемые, Список):-
        проверить_показание(Имя, 1, Подозреваемые, Список),
        проверить_показание(Имя, 2, Подозреваемые, Список),
        проверить_показание(Имя, 3, Подозреваемые, Список).
%++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    % Удалось установить, что все кражи – дело рук одного вора
	дело_рук_одного_вора([], 0).
	дело_рук_одного_вора([Первый|Хвост_списка], Количество):- 
	    
	    дело_рук_одного_вора(Хвост_списка, Количество_1),
	    Первый = человек(_, виновен),
	    Количество = Количество_1 + 1.

	дело_рук_одного_вора([Первый|Хвост_списка], Количество):- 

	    дело_рук_одного_вора(Хвост_списка, Количество_1),
	    Первый = человек(_, невиновен),
	    Количество = Количество_1.
%++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
% Генерируем гипотезу - список подозреваемых со свойствами: имя и вина, а также списки истинностей каждого
% из подозреваемых
    генерация_гипотезы(Подозреваемые) :-  
        возможный_список_истинности_показаний(Список_1),
        возможный_список_истинности_показаний(Список_2),
        возможный_список_истинности_показаний(Список_3),
        возможный_список_истинности_показаний(Список_4),

        Списки = [Список_1, Список_2, Список_3, Список_4],
        проверка_количества_истинных_показаний(Списки),

        возможная_вина(Вина_1), возможная_вина(Вина_2), возможная_вина(Вина_3), возможная_вина(Вина_4),
        Подозреваемые = [человек("А", Вина_1), человек("Б", Вина_2), человек("В", Вина_3), человек("Г", Вина_4)],

        дело_рук_одного_вора(Подозреваемые, 1),

        % проверяем гипотезу
        проверить_все_показания_одного_подозреваемого("А", Подозреваемые, Список_1),
        проверить_все_показания_одного_подозреваемого("Б", Подозреваемые, Список_2),
        проверить_все_показания_одного_подозреваемого("В", Подозреваемые, Список_3),
        проверить_все_показания_одного_подозреваемого("Г", Подозреваемые, Список_4).
%++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    % выводим решение из проверенных гипотез
    кто_же_вор(Имя) :- генерация_гипотезы(Подозреваемые),
                       входит_в(человек(Имя, виновен), Подозреваемые).

    
GOAL 
    кто_же_вор(Вор).
    
