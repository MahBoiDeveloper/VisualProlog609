/*
                       Инженеры отдыхают
                       
В течение последних четырех лет инженеры Еремин, Фомин, Дементьев и Барклая
получают очередные отпуска в мае, июне, июле и августе. Причем если один из них
отдыхает в мае, то другой в июне, третий - в июле, а четвертый - в августе.

Каждый из них получал отпуск в разное время.

Так, в первый год Дементьев отдыхал в июле, во второй год Дементьев отдыхал в
августе, а Еремин - в мае. На третий год Барклая отдыхал в июне, а Фомин на четвертый
год - в июле.

Требуется узнать время отдыха каждого инженера в каждом году.
*/

DOMAINS
    номер, год       = integer
    фамилия, месяц   = symbol
    список_месяцев   = месяц*
    отпуск           = отпуск(год, месяц)
    список_отпусков  = отпуск*
    список_списков   = список_отпусков*
    инженер          = инженер(фамилия, список_отпусков)
    список_инженеров = инженер*

PREDICATES
    nondeterm возможный_месяц               (месяц)
    nondeterm входит_в                      (отпуск, список_отпусков)
    nondeterm входит_в                      (инженер, список_инженеров)
    nondeterm утверждение                   (номер, список_инженеров)
    nondeterm проверка_утверждений          (список_инженеров)
    nondeterm проверить_различие_месяцев    (список_списков)
    nondeterm генерация_списка_отпусков     (список_отпусков)
    nondeterm генерация_и_проверка_гипотезы (список_инженеров)
    nondeterm сформировать_список_месяцев   (список_отпусков, список_месяцев)
    nondeterm поиск_решения                 (фамилия, список_месяцев)

CLAUSES
    % месяцы
    возможный_месяц("Май").
    возможный_месяц("Июнь").
    возможный_месяц("Июль").
    возможный_месяц("Август").
    
    %поиск по списку
    входит_в(Элемент,[Первый | _])
    :-
        Элемент=Первый
    .
    входит_в(Элемент,[_ | Хвост_списка])
    :-
        входит_в(Элемент,Хвост_списка)
    .
    
    % Так, в первый год Дементьев отдыхал в июле
    утверждение(1, Список_инженеров)
    :-
        входит_в(инженер("Дементьев", Список), Список_инженеров),
        входит_в(отпуск(1, "Июль"), Список)
    .
    % во второй год Дементьев отдыхал в августе, а Еремин - в мае.
    утверждение(2, Список_инженеров)
    :-
        входит_в(инженер("Дементьев", Список_1), Список_инженеров),
        входит_в(отпуск(2, "Август"), Список_1),
    
        входит_в(инженер("Еремин", Список_2), Список_инженеров),
        входит_в(отпуск(2, "Май"), Список_2)
    .
    % На третий год Барклая отдыхал в июне
    утверждение(3, Список_инженеров)
    :-
        входит_в(инженер("Барклая", Список), Список_инженеров),
        входит_в(отпуск(3, "Июнь"), Список)
    .
    % а Фомин на четвертый год - в июле.
    утверждение(4, Список_инженеров)
    :-
        входит_в(инженер("Фомин", Список), Список_инженеров),
        входит_в(отпуск(4, "Июль"), Список)
    .

    % проверка
    проверка_утверждений(Список_инженеров)
    :-
        утверждение(1, Список_инженеров),
        утверждение(2, Список_инженеров),
        утверждение(3, Список_инженеров),
        утверждение(4, Список_инженеров)
    .
    
    % в один год у всех были разные месяцы
    проверить_различие_месяцев([[], [], [], []]).
    проверить_различие_месяцев
    (
        [
            [Отпуск_1 | Хвост_1], 
            [Отпуск_2 | Хвост_2], 
            [Отпуск_3 | Хвост_3], 
            [Отпуск_4 | Хвост_4]
        ]
    )
    :- 
        проверить_различие_месяцев([Хвост_1, Хвост_2, Хвост_3, Хвост_4]),
    
        Отпуск_1 = отпуск(Год, Месяц_1), Отпуск_2 = отпуск(Год, Месяц_2),
        Отпуск_3 = отпуск(Год, Месяц_3), Отпуск_4 = отпуск(Год, Месяц_4),
    
        not(Месяц_1 = Месяц_2), not(Месяц_1 = Месяц_3), not(Месяц_1 = Месяц_4),
        not(Месяц_2 = Месяц_3), not(Месяц_2 = Месяц_4),
        not(Месяц_3 = Месяц_4)
    .

    % распределение месяцев по инженерам
    генерация_списка_отпусков(Список)
    :-
        возможный_месяц(Месяц_1), возможный_месяц(Месяц_2), возможный_месяц(Месяц_3), возможный_месяц(Месяц_4),
        % Каждый из них получал отпуск в разное время.
        not(Месяц_1 = Месяц_2), not(Месяц_1 = Месяц_3), not(Месяц_1 = Месяц_4),
        not(Месяц_2 = Месяц_3), not(Месяц_2 = Месяц_4),
        not(Месяц_3 = Месяц_4),
    
        % четыре года подряд был отпуск
        Список = [отпуск(1, Месяц_1), отпуск(2, Месяц_2), отпуск(3, Месяц_3), отпуск(4, Месяц_4)]
    .

    % генерация гипотезы
    генерация_и_проверка_гипотезы(Список_инженеров)
    :- 
        генерация_списка_отпусков(Список_отпусков_1), генерация_списка_отпусков(Список_отпусков_2),
        генерация_списка_отпусков(Список_отпусков_3), генерация_списка_отпусков(Список_отпусков_4),
        Список_списков_отпусков_инженеров = [Список_отпусков_1, Список_отпусков_2, Список_отпусков_3, Список_отпусков_4],

        % Каждый из них получал отпуск в разное время.
        проверить_различие_месяцев(Список_списков_отпусков_инженеров),

        % В течение последних четырех лет инженеры Еремин, Фомин, Дементьев и Барклая
        Список_инженеров = 
        [
            инженер("Еремин",    Список_отпусков_1), 
            инженер("Фомин",     Список_отпусков_2),
            инженер("Дементьев", Список_отпусков_3), 
            инженер("Барклая",   Список_отпусков_4)
        ],

        % проверка_гипотезы
        проверка_утверждений(Список_инженеров)
    .

    % получить список месяцев из отпусков для инженера
    сформировать_список_месяцев([], []).
    сформировать_список_месяцев([Отпуск | Хвост], Список_месяцев)
    :-
        сформировать_список_месяцев(Хвост, Список_месяцев_1),
        Отпуск = отпуск(_, Месяц),
        Список_месяцев = [Месяц | Список_месяцев_1]
    .
    
    поиск_решения(Инженер, Список_месяцев)
    :-
        write("Время отдыха для каждого инженера по годам:"), nl,
        генерация_и_проверка_гипотезы(Список_инженеров),
        входит_в(инженер(Инженер, Список_отпусков), Список_инженеров),
        сформировать_список_месяцев(Список_отпусков, Список_месяцев)
    .
            
GOAL
    поиск_решения(Инженер, Список_месяцев).
