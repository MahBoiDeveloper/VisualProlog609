/*
                  Мучительный выбор
Андрей является участником шоу-викторины. Главный приз спрятан в одном из
ящиков. Андрей получает 4 подсказки:
	1. Приз находится в синем или зелёном ящике.
	2. Приз находится в красном или желтом ящике.
	3. Приз находится в зелёном ящике.
	4. В жёлтом ящике приза нет.
Три подсказки ошибочны и только одна правильная. Андрей поразмыслил и открыл
правильный ящик. Ящик какого цвета он выбрал? 
*/

DOMAINS
количество, номер, истинность = integer
цвет, приз = symbol
наличие_призов = приз*
ящик = ящик(цвет, приз)
список_ящиков = ящик*

PREDICATES
nondeterm наличие_приза(приз)
nondeterm входит_в(ящик, список_ящиков)
nondeterm подсказка(номер, список_ящиков)
nondeterm проверка_подсказки(номер, список_ящиков, истинность)
nondeterm проверка_подсказок(список_ящиков)
nondeterm подсчет_количества(наличие_призов, приз, количество)
nondeterm проверка_количества_призов(наличие_призов)
nondeterm генерация_и_проверка_гипотезы(список_ящиков)
nondeterm поиск_решения(цвет)

CLAUSES

наличие_приза(есть).
наличие_приза(нет).

%поиск по списку
входит_в(Элемент,[Первый|_]) :- Элемент=Первый.
входит_в(Элемент,[_|Хвост_списка]) :- входит_в(Элемент,Хвост_списка).

% 1. Приз находится в синем или зелёном ящике.
подсказка(1, Список_ящиков) :- входит_в(ящик(синий, есть), Список_ящиков);
                               входит_в(ящик(зелёный, есть), Список_ящиков).

% 2. Приз находится в красном или желтом ящике.
подсказка(2, Список_ящиков) :- входит_в(ящик(красный, есть), Список_ящиков);
                               входит_в(ящик(желтый, есть), Список_ящиков).

% 3. Приз находится в зелёном ящике.
подсказка(3, Список_ящиков) :- входит_в(ящик(зелёный, есть), Список_ящиков).

% 4. В жёлтом ящике приза нет.
подсказка(4, Список_ящиков) :- входит_в(ящик(желтый, нет), Список_ящиков).

% Если подсказка истинна, то предикат возвращает 1, если ложна - то 0
проверка_подсказки(Номер, Список_ящиков, Истинность) :- подсказка(Номер, Список_ящиков),
                                                        Истинность = 1;
                                                        
                                                        not(подсказка(Номер, Список_ящиков)),
                                                        Истинность = 0.

% Проверка подсказок(три подсказки ошибочны и только одна правильная):
% каждая из подсказок либо истинна, либо ложна, и т.к. предикат проверка_подсказки для
% каждой подсказки возвращает либо 1, либо 0, то для нашей задачи сумма всех возвращенных значений
% должна быть равна единице (ведь только одна подсказка истинна)
проверка_подсказок(Список_ящиков) :- проверка_подсказки(1, Список_ящиков, Истинность_1),
                                     проверка_подсказки(2, Список_ящиков, Истинность_2),
                                     проверка_подсказки(3, Список_ящиков, Истинность_3),
                                     проверка_подсказки(4, Список_ящиков, Истинность_4),

                                     Количество_истинных = Истинность_1 + Истинность_2 + Истинность_3 + Истинность_4,
                                     Количество_истинных = 1.

% подсчет количества призов
подсчет_количества([], _, 0).
подсчет_количества([Первый|Хвост_списка], Наличие, Количество):-

                подсчет_количества(Хвост_списка, Наличие, Количество_1),
                Первый = Наличие,
                Количество = Количество_1 + 1.

подсчет_количества([Первый|Хвост_списка], Наличие, Количество):-

                подсчет_количества(Хвост_списка, Наличие, Количество_1),
                not(Первый = Наличие),
                Количество = Количество_1.

проверка_количества_призов(Список_призов) :- подсчет_количества(Список_призов, есть, 1).

%генерация и проверка гипотезы
генерация_и_проверка_гипотезы(Список_ящиков) :-

        наличие_приза(Приз_1),
        наличие_приза(Приз_2),
        наличие_приза(Приз_3),
        наличие_приза(Приз_4),

        Список_призов = [Приз_1, Приз_2, Приз_3, Приз_4],
        проверка_количества_призов(Список_призов),

        Список_ящиков = [ящик(синий, Приз_1), ящик(зелёный, Приз_2), ящик(красный, Приз_3), ящик(желтый, Приз_4)],
        проверка_подсказок(Список_ящиков).


поиск_решения(Цвет) :- write("Андрей выбрал ящик:"),nl,
                       генерация_и_проверка_гипотезы(Список_ящиков),
                       входит_в(ящик(Цвет, есть), Список_ящиков).
        
GOAL
%генерация_и_проверка_гипотезы(Список_ящиков).
поиск_решения(Цвет).