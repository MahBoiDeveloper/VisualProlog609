/*Задача №109    Судебный процесс 3
- Как сейчас, помню, рассказывали мне как-то раз об аналогичном судебном процессе,-продолжал Белый Рыцарь.
- Подсудимых было трое. Каждый обвинял одного из двух других, и первый подсудимый говорил правду. 
К сожалению, Бармаглот ничего не сказал мне о том, лгал ли или говорил правду второй подсудимый, но зато сообщил мне, 
лгал ли или говорил правду третий подсудимый. Эта информация не позволила мне установить виновного. 
Тогда Бармаглот сообщил мне, кого обвинял третий подсудимый, и я сразу смог определить, кто из троих подсудимых виновен.
К сожалению, я не помню ни того, говорил ли третий подсудимый правду или лгал, ни того, кого он обвинял.
Кто из подсудимых виновен на этот раз? */
DOMAINS
    имя                = первый; второй; третий
    виновность         = виновен; не_виновен
    правдивость        = правда; ложь
    структура_гипотезы = подсудимый(имя, виновность, правдивость, имя)
    имена              = имя*
    все_имена          = имена*
    список_виновностей = виновность*
    гипотеза           = структура_гипотезы*
    гипотезы           = гипотеза*
PREDICATES
    nondeterm входит_в                (структура_гипотезы, гипотеза)
    nondeterm количество              (имена, integer) 
    nondeterm количество              (все_имена, integer) 
    nondeterm один_из                 (имена, все_имена) 
    nondeterm убрать_повторы          (все_имена, все_имена, все_имена)
    nondeterm генерация_виновностей   (integer, список_виновностей)
    
    nondeterm возможное_имя           (имя)
    nondeterm возможная_правдивость   (правдивость)
  
    nondeterm генерация_гипотезы      (гипотеза)
    nondeterm сказал                  (имя, гипотеза)
    nondeterm проверка_высказываний   (гипотеза)
    nondeterm поиск_виновных          (имена, правдивость)
    nondeterm установить_правдивость3 (правдивость)
    nondeterm поиск_виновных2         (имена, имя)
    nondeterm установить_обвиняемого3 (имя)
    nondeterm проверка_третьего       (гипотеза)
    nondeterm проверка_гипотезы       (имена)
    nondeterm является_виновным       (имя)
CLAUSES
    входит_в(Подсудимый, [ Подсудимый | _ ]).
    входит_в(Подсудимый, [ _ | Хвост ])
    :-
        входит_в(Подсудимый, Хвост)
    .
    
    количество([], 0).
    количество([ _Голова | Хвост ], Количество)
    :-
        количество(Хвост, КоличествоОстальных),
        Количество = КоличествоОстальных + 1
    .
   
    один_из(Элемент, [ Первый | _ ])
    :-
        Элемент = Первый
    .
    один_из(Элемент, [ Первый | Остальные ])
    :-
        not(Элемент = Первый),
        один_из(Элемент, Остальные)
    .
    
    убрать_повторы([], Накопитель, СписокБезПовторов)
    :-
        СписокБезПовторов = Накопитель
    .
    убрать_повторы([ ПервыйЭлемент | ОстальныеЭлементы ], Накопитель, СписокБезПовторов)
    :-
        один_из(ПервыйЭлемент, Накопитель), 
        убрать_повторы(ОстальныеЭлементы, Накопитель, СписокБезПовторов)
    .
    убрать_повторы([ ПервыйЭлемент | ОстальныеЭлементы ], Накопитель, СписокБезПовторов)
    :-
        not(один_из(ПервыйЭлемент, Накопитель)),
        убрать_повторы(ОстальныеЭлементы, [ ПервыйЭлемент | Накопитель ], СписокБезПовторов)
    .
    
    возможная_правдивость(правда).
    возможная_правдивость(ложь).  
    возможное_имя(первый).
    возможное_имя(второй).
    возможное_имя(третий).
    
    генерация_виновностей(0, []).
    генерация_виновностей(Флаг, [ не_виновен | Остальные ])
    :-
        генерация_виновностей(Флаг, Остальные)
    .
    генерация_виновностей(1, [ виновен | Остальные ])
    :-
        генерация_виновностей(0, Остальные)
    .
% Генерация гипотезы
    генерация_гипотезы(Гипотеза)
    :-
        возможная_правдивость(Правдивость2),
        возможная_правдивость(Правдивость3),
        возможное_имя(Обвиняемый1),
        возможное_имя(Обвиняемый2),
        возможное_имя(Обвиняемый3),
        not(Обвиняемый1 = первый), not(Обвиняемый2 = второй), not(Обвиняемый3 = третий),
        генерация_виновностей(1, [Вина1, Вина2, Вина3]),   
        %  ... и первый подсудимый говорил правду.  
        Гипотеза = 
        [
            подсудимый(первый, Вина1, правда, Обвиняемый1),
            подсудимый(второй, Вина2, Правдивость2, Обвиняемый2),
            подсудимый(третий, Вина3, Правдивость3, Обвиняемый3)
        ],
        findall
        (
            Имя, 
            входит_в(подсудимый(Имя, виновен, _, _), Гипотеза), 
            Виновные
        ), 
        количество(Виновные, КоличествоВиновных),
        КоличествоВиновных > 0
    .

    %Каждый обвинял одного из двух других         
    сказал(Имя,Гипотеза)
    :-
        входит_в(подсудимый(Имя, _, правда, Обвиняемый), Гипотеза),
        входит_в(подсудимый(Обвиняемый, виновен, _, _), Гипотеза)
    ;
        входит_в(подсудимый(Имя, _, ложь, Обвиняемый), Гипотеза),
        входит_в(подсудимый(Обвиняемый, не_виновен, _, _), Гипотеза)
    .
          
    поиск_виновных(ИменаВиновных, Правдивость3)
    :-
        проверка_высказываний(Гипотеза),
        входит_в(подсудимый(третий, _, Правдивость3, _), Гипотеза),
        findall
        (
            Имя,
            входит_в(подсудимый(Имя, виновен, _,_), Гипотеза),
            ИменаВиновных
        )
    .
    
    проверка_высказываний(Гипотеза)
    :-
        генерация_гипотезы(Гипотеза),
        сказал(первый, Гипотеза),
        сказал(второй, Гипотеза),
        сказал(третий, Гипотеза)
    .
            
    установить_правдивость3(Правдивость)
    :-
        findall
        (
            Виновные,
            поиск_виновных(Виновные, правда),
            ВсеВиновные
        ),
        убрать_повторы(ВсеВиновные, [], Виновные),     
        количество(Виновные, ЧислоРешений), ЧислоРешений = 1, 
        Правдивость = правда
    ;
        findall
        (
            Виновные,
            поиск_виновных(Виновные, ложь),
            ВсеВиновные
        ),
        убрать_повторы(ВсеВиновные, [], Виновные),
        количество(Виновные, ЧислоРешений), ЧислоРешений = 1, 
        Правдивость = ложь
    .
                
    проверка_третьего(Гипотеза)
    :-
        проверка_высказываний(Гипотеза),
        %... сообщил мне, лгал ли или говорил правду третий подсудимый
        установить_правдивость3(Правдивость),
        %Эта информация не позволила мне установить виновного. 
        not(входит_в(подсудимый(третий, _, Правдивость,_), Гипотеза))
    .
        
    поиск_виновных2(ИменаВиновных, Обвиняемый3)
    :-
        проверка_третьего(Гипотеза),
        входит_в(подсудимый(третий, _, _, Обвиняемый3),Гипотеза),
        findall
        (
            Имя, 
            входит_в(подсудимый(Имя, виновен, _, _), Гипотеза), 
            ИменаВиновных
        ). 
        
    установить_обвиняемого3(Обвиняемый)
    :-
        findall
        (
            ИменаВиновных, 
            поиск_виновных2(ИменаВиновных, первый), 
            ВсеВиновные
        ),
        убрать_повторы(ВсеВиновные, [], Виновные),
        количество(Виновные, ЧислоРешений), 
        ЧислоРешений = 1, 
        Обвиняемый = первый
    ;
        findall
        (
            ИменаВиновных, 
            поиск_виновных2(ИменаВиновных, второй), 
            ВсеВиновные
        ),
        убрать_повторы(ВсеВиновные, [], Виновные),
        количество(Виновные, ЧислоРешений), 
        ЧислоРешений = 1, 
        Обвиняемый = второй
    .
  
    проверка_гипотезы(ИменаВиновных)
    :-
        проверка_третьего(Гипотеза),
        %Тогда Бармаглот сообщил мне, кого обвинял третий подсудимый
        установить_обвиняемого3(КогоОбвинял3),
        входит_в(подсудимый(третий, _, _, КогоОбвинял3), Гипотеза),
        findall
        (
            Имя, 
            входит_в(подсудимый(Имя, виновен, _, _), Гипотеза), 
            ИменаВиновных
        )
    .
        
    является_виновным(Имя)
    :-
        findall
        (
            ИменаВиновных, 
            проверка_гипотезы(ИменаВиновных), 
            ВсеВиновные
        ),
        убрать_повторы(ВсеВиновные, [], Виновный),
        Виновный = [ [ Имя ] | _ ]
    .
GOAL
    является_виновным(Виновен).
