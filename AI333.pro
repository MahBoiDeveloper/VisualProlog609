/*Кража на деревенском рынке.
Экономика планеты Дранак построена на рыночных отношениях. 
Это значит, что основное занятие дранакцев – продажа, покупка и обмен товаров на рынках, которые есть в каждой деревне. 
Из продуктов больше всего ценятся молоко козлопотамов, яйца двоегусей и шипосливы. 
Пока продавец обсуждал с покупателем условия крупной сделки, вор утащил пирог из шипослив. 
Задержано трое подозреваемых, среди них надо найти одного виновного. 
Каждый из подозреваемых высказался три раза, дав при этом не меньше двух ложных ответов. 
Тем не менее мы можем точно указать на вора.
А: 1. Это сделал Б.
   2. Я несколько раз встречался с В.
   3. У меня полно своих шипослив.
Б: 1. А и В незнакомы и никогда не встречались.
   2. Это сделал я.
   3. Третье высказывание А – ложь.
В: 1. Я незнаком с А и никогда его не видел.
   2. Шипосливы украл А.
   3. Третье высказывание Б – правда.
Кто же украл и съел пирог? */

DOMAINS
    номер, количество                  = integer
    вина, правдивость, знакомство, имя = symbol
    список_знакомств                   = знакомство*
    список_правдивостей                = правдивость*
    список_виновных                    = вина*
    подозреваемый                      = подозреваемый(имя, вина, список_правдивостей)
    гипотеза                           = подозреваемый*
    список_гипотез                     = гипотеза*
PREDICATES
    nondeterm возможная_вина                            (вина)
    nondeterm возможная_правдивость                     (правдивость)
    nondeterm возможное_знакомство_А_и_В                (знакомство)
    nondeterm возможный_список_правдивости_высказываний (список_правдивостей)
    nondeterm входит_в                                  (подозреваемый,гипотеза)
    nondeterm входит_в                                  (гипотеза,список_гипотез)
    nondeterm содержит_правдивость_под_номером          (список_правдивостей, правдивость, номер)
    nondeterm сказал                                    (номер, имя, гипотеза, знакомство)
    nondeterm проверить_высказывание                    (имя, номер, гипотеза, знакомство)
    nondeterm проверка_высказываний_подозреваемого      (имя, гипотеза, знакомство)
    nondeterm содержит_количество                       (вина, список_виновных, количество)
    nondeterm содержит_количество                       (правдивость, список_правдивостей, количество)
    nondeterm генерация_и_проверка_гипотезы             (гипотеза)
    nondeterm отсев_дублей                              (список_гипотез, список_гипотез)
    nondeterm поиск_решения                             (имя)
CLAUSES
    возможная_вина(виновен).
    возможная_вина(невиновен).

    возможная_правдивость(правдиво).
    возможная_правдивость(ложно).

    возможное_знакомство_А_и_В(знакомы).
    возможное_знакомство_А_и_В(незнакомы).
% Формируем список для каждого подозреваемого, в котором говорится: какое из высказываний ложно, а какое правдиво
    возможный_список_правдивости_высказываний(Список)
    :-возможная_правдивость(Правдивость_1),
        возможная_правдивость(Правдивость_2),
        возможная_правдивость(Правдивость_3),
        Список = [Правдивость_1, Правдивость_2, Правдивость_3]
    .
% поиск по списку
    входит_в(Элемент,[ Первый | _ ])
    :-
        Элемент=Первый
    .
    входит_в(Элемент,[ _ | Хвост_списка ])
    :-
        входит_в(Элемент,Хвост_списка)
    .
% поиск в списке по номеру
    содержит_правдивость_под_номером([ Правдивость | _ ], Правдивость, Номер)
    :-
        Номер - 1 = 0
    .
    содержит_правдивость_под_номером([ _ | Хвост_списка_правдивостей ], Правдивость, Номер)
    :-
        Номер_1 = Номер - 1,
        содержит_правдивость_под_номером(Хвост_списка_правдивостей, Правдивость, Номер_1)
    .

% А:
    %Это сделал Б.
    сказал(1, "А", Гипотеза, _)
    :-
        входит_в(подозреваемый("Б", виновен, _), Гипотеза)
    .
    %Я несколько раз встречался с В.
    сказал(2, "А", _, знакомы).               
    %У меня полно своих шипослив.
    сказал(3, "А", Гипотеза, _)
    :-
        входит_в(подозреваемый("А", невиновен, _), Гипотеза)
    .
        
% Б:
    %А и В незнакомы и никогда не встречались.
    сказал(1, "Б", _, незнакомы).                                     
    %Это сделал я.
    сказал(2, "Б", Гипотеза, _)
    :-
        входит_в(подозреваемый("Б", виновен, _), Гипотеза)
    .
    %Третье высказывание А – ложь.
    сказал(3, "Б", Гипотеза, Знакомство)
    :-
        not(сказал(3, "А", Гипотеза, Знакомство))
    .
        
% В:
    %Я незнакомы с А и никогда его не видел.
    сказал(1, "В", _, незнакомы).                                     
    %Шипосливы украл А.
    сказал(2, "В", Гипотеза, _)
    :-
        входит_в( подозреваемый("А", виновен, _),Гипотеза)
    .
    %Третье высказывание Б – правда.
    сказал(3, "В", Гипотеза, Знакомство)
    :-
        сказал(3, "Б", Гипотеза, Знакомство)
    .

% проверяем высказывание
    проверить_высказывание(Подозреваемый, Номер, Гипотеза, Знакомство)
    :-
        входит_в(подозреваемый(Подозреваемый, _, Правдивость_высказываний),Гипотеза),
        содержит_правдивость_под_номером(Правдивость_высказываний, правдиво, Номер),
        сказал(Номер, Подозреваемый, Гипотеза, Знакомство)
    .
    проверить_высказывание(Подозреваемый, Номер, Гипотеза, Знакомство)
    :-
        входит_в(подозреваемый(Подозреваемый, _, Правдивость_высказываний),Гипотеза),
        содержит_правдивость_под_номером(Правдивость_высказываний, ложно, Номер),
        not(сказал(Номер, Подозреваемый, Гипотеза, Знакомство))
    .
       
% проверяем все высказывания одного подозриваемого
    проверка_высказываний_подозреваемого(Подозреваемый, Гипотеза, Знакомство)
    :-
        проверить_высказывание(Подозреваемый, 1, Гипотеза, Знакомство),
        проверить_высказывание(Подозреваемый, 2, Гипотеза, Знакомство),
        проверить_высказывание(Подозреваемый, 3, Гипотеза, Знакомство)
    .
        
%считаем сколько ложных высказываний в списке
    содержит_количество(_, [], 0).
    содержит_количество(Первый, [ Первый | Хвост_списка ], Количество)
    :-
        содержит_количество(Первый, Хвост_списка, Количество_1),
        Количество = Количество_1 + 1
    .
    содержит_количество(Признак, [Первый|Хвост_списка], Количество)
    :-
        содержит_количество(Признак, Хвост_списка, Количество_1),
        not(Признак = Первый),
        Количество = Количество_1
    .

% гипотеза - предположение о возможных свойствах каждого подозреваемого, т.е. его вина, знакомства и правдивость высказываний
    генерация_и_проверка_гипотезы(Гипотеза)
    :-
        % генерация гипотезы
        возможная_вина(Вина_А), возможная_вина(Вина_Б), возможная_вина(Вина_В),
        Список_виновных = [Вина_А, Вина_Б, Вина_В], 
        содержит_количество(виновен, Список_виновных, 1),

        возможный_список_правдивости_высказываний(Правдивость_А), 
        содержит_количество(ложно, Правдивость_А, Количество_А), Количество_А >= 2,
        возможный_список_правдивости_высказываний(Правдивость_Б), 
        содержит_количество(ложно, Правдивость_Б, Количество_Б), Количество_Б >= 2,
        возможный_список_правдивости_высказываний(Правдивость_В), 
        содержит_количество(ложно, Правдивость_В, Количество_В), Количество_В >= 2,

        возможное_знакомство_А_и_В(Знакомство),

        Гипотеза = 
        [
            подозреваемый("А", Вина_А, Правдивость_А),
            подозреваемый("Б", Вина_Б, Правдивость_Б),
            подозреваемый("В", Вина_В, Правдивость_В)
        ],
        % проверка_гипотезы
        проверка_высказываний_подозреваемого("А", Гипотеза, Знакомство),
        проверка_высказываний_подозреваемого("Б", Гипотеза, Знакомство),
        проверка_высказываний_подозреваемого("В", Гипотеза, Знакомство)
    .
%предикат, отсеивающий повторяющиеся гипотезы
    отсев_дублей([Последний], [Последний]).
    отсев_дублей([ Первый | Хвост_списка ], Новый_список)
    :-
        отсев_дублей(Хвост_списка, Новый_список_1),
        not(входит_в(Первый, Новый_список_1)),
        Новый_список = [ Первый | Новый_список_1 ]
    .
    отсев_дублей([Первый|Хвост_списка], Новый_список)
    :-
        отсев_дублей(Хвост_списка, Новый_список_1),
        входит_в(Первый, Новый_список_1),
        Новый_список = Новый_список_1
    .
% находим виновного
поиск_решения(Пирог_украл) 
    :- 
        findall(Гипотеза, генерация_и_проверка_гипотезы(Гипотеза), Список_гипотез),
        отсев_дублей(Список_гипотез, Список_без_дублей),
        входит_в(Гипотеза, Список_без_дублей),
        входит_в(подозреваемый(Пирог_украл, виновен, _), Гипотеза)
    .
GOAL
    поиск_решения(Пирог_украл).
