% Задача №303
% Стритрейсеры
% Четверо владельцев автомобилей: Шумахер, Феттель, Хэмилтон и Райконен
% решили провести четыре гонки, меняясь в каждом заезде машинами.
% 1) В первом заезде Феттель был на машине Райконена, а во втором Райконен – на машине Хэмилтона.
% 2) Шумахер выиграл третий заезд на своем Мерседесе, причем он выиграл и все остальные заезды.
% 3) На Феррари во втором заезде ехал Хэмилтон, а в четвертом - Феттель.
% 4) В четвертом заезде Феррари пришла второй после Ягуара.
% Кому принадлежала машина Хонда?
DOMAINS
    заезд             = заезд(список_водителей,номер)
    водитель          = водитель(автомобиль, имя_водителя, позиция_в_заезде)
    автомобиль        = автомобиль(марка, владелец)
    позиция_в_заезде  = integer
    номер             = integer
    список_водителей  = водитель*
    имя_водителя      = шумахер; феттель; хэмилтон; райконен
    владелец          = шумахер; феттель; хэмилтон; райконен
    марка             = мерседес; феррари; ягуар; хонда

    список_заездов    = заезд*
    список_имён       = имя_водителя*
    список_владельцев = владелец*
PREDICATES
    nondeterm возможный_владелец            (владелец)
    nondeterm возможная_марка               (марка)
    nondeterm возможное_имя_водителя        (имя_водителя)
    nondeterm возможная_позиция_в_заеде     (позиция_в_заезде)

    nondeterm проверка_на_уникальность      (список_имён)

    nondeterm найти_водителя_по_его_имени   (имя_водителя, список_водителей, водитель) - (i,i,o)
    nondeterm найти_имя_владельца_по_марке  (марка, список_водителей, владелец) - (i,i,o)
    nondeterm найти_заезд                   (номер, список_заездов, заезд) - (i,i,o)
    nondeterm найти                         (владелец, список_владельцев)
    nondeterm входит_в_список               (водитель, список_водителей)

    nondeterm утверждение                   (номер, список_заездов)
    nondeterm генерация_гипотезы            (список_заездов)
    nondeterm решение_без_повторов          (список_владельцев, список_владельцев, список_владельцев)
    nondeterm решение                       (владелец)
    nondeterm найти_решения                 (список_владельцев)
CLAUSES
% дополнительные предикаты
    возможный_владелец( феттель ).
    возможный_владелец( хэмилтон ).
    возможный_владелец( райконен ).

    возможное_имя_водителя( феттель ).
    возможное_имя_водителя( хэмилтон ).
    возможное_имя_водителя( райконен ).

    возможная_марка( феррари ).
    возможная_марка( ягуар ).
    возможная_марка( хонда ).

    возможная_позиция_в_заеде( 2 ).
    возможная_позиция_в_заеде( 3 ).
    возможная_позиция_в_заеде( 4 ).

    проверка_на_уникальность( [] ).
    проверка_на_уникальность( [A, B, C, D] )
    :-
        not(A=B),not(A=C),not(A=D),
        not(B=C),not(B=D),
        not(C=D)
    .

    решение_без_повторов( [], Накопитель, СписокБезПовторов )
    :-
        СписокБезПовторов = Накопитель
    .
    решение_без_повторов( [ ПервыйЭлемент | ОстальныеЭлементы ], Накопитель, СписокБезПовторов )
    :-
        найти( ПервыйЭлемент, Накопитель ),
        решение_без_повторов( ОстальныеЭлементы, Накопитель, СписокБезПовторов )
    .
    решение_без_повторов( [ ПервыйЭлемент | ОстальныеЭлементы ], Накопитель, СписокБезПовторов )
    :-
        not( найти(ПервыйЭлемент, Накопитель) ),
        решение_без_повторов( ОстальныеЭлементы, [ ПервыйЭлемент | Накопитель ], СписокБезПовторов )
    .
% описание предикатов "найти" и "входит_в"
    найти( Элемент, [ Первый | _ ] )
    :-
        Элемент = Первый
    .
    найти( Элемент, [ Первый | Остальные ] )
    :-
        not( Элемент = Первый ),
        найти( Элемент, Остальные )
    .
    найти_имя_владельца_по_марке
    (
        Искомая_марка,
        [ водитель(автомобиль(Текущая_марка,Текущий_Владелец), _, _) | Хвост ],
        Искомый_Владелец
    )
    :-
        not( Искомая_марка = Текущая_марка ),
        найти_имя_владельца_по_марке( Искомая_марка, Хвост, Искомый_Владелец )
    ;
        Искомая_марка = Текущая_марка,Искомый_Владелец = Текущий_Владелец
    .
    найти_заезд
    (
        Номер_искомого_заезда,
        [ заезд(Список_водителей_в_заезде, Номер_текущего_заезда) | Хвост ],
        Искомый_заезд
    )
    :-
        not( Номер_искомого_заезда = Номер_текущего_заезда ),
        найти_заезд( Номер_искомого_заезда, Хвост, Искомый_заезд )
    ;
        Номер_искомого_заезда = Номер_текущего_заезда,
        Искомый_заезд = заезд( Список_водителей_в_заезде, Номер_текущего_заезда )
    .
    найти_водителя_по_его_имени
    (
        Имя_искомого_водителя,
        [ водитель(автомобиль(_Марка, _Владелец), Имя_текущего_водителя, Позиция_в_заезде) | Хвост ],
        Искомый_водитель
    )
    :-
        not(Имя_искомого_водителя = Имя_текущего_водителя),
        найти_водителя_по_его_имени( Имя_искомого_водителя, Хвост, Искомый_водитель )
    ;
        Имя_искомого_водителя = Имя_текущего_водителя,
        Искомый_водитель = водитель( автомобиль(_Марка, _Владелец), Имя_текущего_водителя, Позиция_в_заезде )
    .
    входит_в_список(Искомый_элемент,[Текущий_элемент|Хвост])
    :-
        Искомый_элемент = Текущий_элемент
    ;
        входит_в_список(Искомый_элемент,Хвост)
    .
% описание утверждений
% 1) В первом заезде Феттель был на машине Райконена, а во втором Райконен – на машине Хэмилтона.
    утверждение( 1, [Заезд1,Заезд2,_,_] ):-
        Заезд1 = заезд(Список_водителей1,_),
        входит_в_список( водитель(автомобиль(_,райконен),феттель,_), Список_водителей1 ),
        Заезд2 = заезд(Список_водителей2,_),
        входит_в_список( водитель(автомобиль(_,хэмилтон),райконен,_), Список_водителей2 ).
% 3) На Феррари во втором заезде ехал Хэмилтон, а в четвертом - Феттель.
    утверждение( 3, [_,Заезд2,_,Заезд4] ):-
        Заезд2 = заезд(Список_водителей2,_),
        входит_в_список( водитель(автомобиль(феррари,_),хэмилтон,_), Список_водителей2 ),
        Заезд4 = заезд(Список_водителей4,_),
        входит_в_список( водитель(автомобиль(феррари,_),феттель,_), Список_водителей4 ).
% 4) В четвертом заезде Феррари пришла второй после Ягуара.
    утверждение( 4, [_,_,_,заезд(Список_приехавших,_)] ):-
        входит_в_список( водитель(автомобиль(ягуар,_),_,1), Список_приехавших ),
        входит_в_список( водитель(автомобиль(феррари,_),_,2), Список_приехавших ).
% предикат генерации проверенной гипотезы
    генерация_гипотезы( Проверенная_гипотеза ):-
        возможная_марка( Марка1 ), 
        возможная_марка( Марка2 ), not( Марка1 = Марка2 ),
        Марка3 = мерседес,
        возможная_марка( Марка4 ), not( Марка1 = Марка4 ),not( Марка2 = Марка4 ),

        возможный_владелец( Владелец1 ),
        возможный_владелец( Владелец2 ), not( Владелец1 = Владелец2 ),
        Владелец3 = шумахер,
        возможный_владелец( Владелец4 ), not( Владелец1 = Владелец4 ),not( Владелец2 = Владелец4 ),

        Водитель11 = шумахер,
        возможное_имя_водителя( Водитель12 ), 
        возможное_имя_водителя( Водитель13 ), not( Водитель12 = Водитель13 ),
        возможное_имя_водителя( Водитель14 ), not( Водитель12 = Водитель14 ),not( Водитель13 = Водитель14 ),

        возможное_имя_водителя( Водитель21 ), 
        Водитель22 = шумахер,
        возможное_имя_водителя( Водитель23 ), not( Водитель21 = Водитель23 ),
        возможное_имя_водителя( Водитель24 ), not( Водитель21 = Водитель24 ),not( Водитель23 = Водитель24 ),

        возможное_имя_водителя( Водитель31 ),
        возможное_имя_водителя( Водитель32 ), not( Водитель31 = Водитель32 ),
        Водитель33 = шумахер,
        возможное_имя_водителя( Водитель34 ), not( Водитель31 = Водитель34 ),not( Водитель32 = Водитель34 ),

        возможное_имя_водителя( Водитель41 ),
        возможное_имя_водителя( Водитель42 ), not( Водитель41 = Водитель42 ),
        возможное_имя_водителя( Водитель43 ), not( Водитель41 = Водитель43 ),not( Водитель42 = Водитель43 ),
        Водитель44 = шумахер,

        проверка_на_уникальность([ Водитель11, Водитель21, Водитель31, Водитель41 ]),
        проверка_на_уникальность([ Водитель12, Водитель22, Водитель32, Водитель42 ]),
        проверка_на_уникальность([ Водитель13, Водитель23, Водитель33, Водитель43 ]),
        проверка_на_уникальность([ Водитель14, Водитель24, Водитель34, Водитель44 ]),
        
        Позиция11 = 1,                        
        возможная_позиция_в_заеде( Позиция12 ), 
        возможная_позиция_в_заеде( Позиция13 ), not( Позиция12 = Позиция13 ),
        возможная_позиция_в_заеде( Позиция14 ), not( Позиция12 = Позиция14 ),not( Позиция13 = Позиция14 ),

        возможная_позиция_в_заеде( Позиция21 ),
        Позиция22 = 1,
        возможная_позиция_в_заеде( Позиция23 ), not( Позиция21 = Позиция23 ),
        возможная_позиция_в_заеде( Позиция24 ), not( Позиция21 = Позиция24 ),not( Позиция23 = Позиция24 ),

        возможная_позиция_в_заеде( Позиция31 ),
        возможная_позиция_в_заеде( Позиция32 ), not( Позиция31 = Позиция32 ),
        Позиция33 = 1,
        возможная_позиция_в_заеде( Позиция34 ), not( Позиция31 = Позиция34 ),not( Позиция32 = Позиция34 ),

        возможная_позиция_в_заеде( Позиция41 ),
        возможная_позиция_в_заеде( Позиция42 ), not( Позиция41 = Позиция42 ),
        возможная_позиция_в_заеде( Позиция43 ), not( Позиция41 = Позиция43 ),not( Позиция42 = Позиция43 ),
        Позиция44 = 1,

        Заезд1 = заезд
        (
            [
                водитель( автомобиль(Марка1,Владелец1), Водитель11, Позиция11 ),
                водитель( автомобиль(Марка2,Владелец2), Водитель12, Позиция12 ),
                водитель( автомобиль(Марка3,Владелец3), Водитель13, Позиция13 ),
                водитель( автомобиль(Марка4,Владелец4), Водитель14, Позиция14 )
            ],
            1
        ),

        Заезд2 = заезд
        (
            [
                водитель( автомобиль(Марка1,Владелец1), Водитель21, Позиция21 ),
                водитель( автомобиль(Марка2,Владелец2), Водитель22, Позиция22 ),
                водитель( автомобиль(Марка3,Владелец3), Водитель23, Позиция23 ),
                водитель( автомобиль(Марка4,Владелец4), Водитель24, Позиция24 )
            ],
            2
        ),

        Заезд3 = заезд
        (
            [
                водитель( автомобиль(Марка1,Владелец1), Водитель31, Позиция31 ),
                водитель( автомобиль(Марка2,Владелец2), Водитель32, Позиция32 ),
                водитель( автомобиль(Марка3,Владелец3), Водитель33, Позиция33 ),
                водитель( автомобиль(Марка4,Владелец4), Водитель34, Позиция34 )
            ],
            3
        ),

        Заезд4 = заезд
        (
            [
                водитель( автомобиль(Марка1,Владелец1), Водитель41, Позиция41 ),
                водитель( автомобиль(Марка2,Владелец2), Водитель42, Позиция42 ),
                водитель( автомобиль(Марка3,Владелец3), Водитель43, Позиция43 ),
                водитель( автомобиль(Марка4,Владелец4), Водитель44, Позиция44 )
            ],
            4
        ),

        Проверенная_гипотеза = [ Заезд1, Заезд2, Заезд3, Заезд4 ],
        утверждение( 1,Проверенная_гипотеза ),
        утверждение( 3,Проверенная_гипотеза ),
        утверждение( 4,Проверенная_гипотеза )
    .
% предикат вывода решения
    решение(Имя_владельца)
    :-
        генерация_гипотезы( [ заезд(Заезд,_)|_ ] ),
        найти_имя_владельца_по_марке( хонда, Заезд, Имя_владельца )
    .
    найти_решения(Список_решений)
    :-
        findall
        (
            _Решения,
            решение( _Решения ),
            Решения
        ),
        решение_без_повторов( Решения, [], Список_решений )
    .
GOAL
    найти_решения(Хонда_принадлежит).
