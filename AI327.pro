%                      Н, который никому не верит.
% Четверых гиперборейцев спросили, кто из них из какого племени. Два дали по одному
% ответу, третий – два, а четвертый – три, причем все отрицательные.
% Гиперборею населяют три племени: сорореанцы, которые всегда говорят правду,
% норореанцы, которые всегда лгут, и мидрореанцы, которые говорят правду и лгут через
% раз, но первый ответ может быть и правдой, и ложью.
%     А: Мы все из разных племен.
%     Б: Мы все из одного племени.
%     В: 
%         1. Мы не из одного племени.
%         2. Мы с Б из одного племени.
%     Н: 
%         1. Я не согласен с высказыванием А.
%         2. Я не согласен с высказыванием Б.
%         3. Я не согласен с первым высказыванием В.
% Кто из четверых гиперборейцев из какого племени?
DOMAINS
    высказывание        = высказывание(человек, номер, содержание)
    номер               = integer
    содержание          = правда; ложь

    человек             = человек(имя, племя)
    имя                 = а;б;в;н
    племя               = сорореанец; норореанец; мидрореанец

    список_высказываний = высказывание*
    список_племён       = племя*
    список_людей        = человек*
    список_решений      = список_людей*
PREDICATES
    nondeterm возможное_племя                                            (племя)
    nondeterm возможное_содержание_высказывания_в_зависимости_от_племени (племя,содержание) - (i,o)
    nondeterm возможное_содержание_высказывания_в_зависимости_от_племени (племя,содержание,содержание) - (i,i,o)

    nondeterm проверка_на_уникальность                                   (список_племён)
    nondeterm проверка_на_уникальность                                   (племя, список_племён)
    nondeterm проверка_на_уникальность                                   (список_решений)
    nondeterm проверка_на_уникальность                                   (список_людей, список_решений)
    
    nondeterm найти                                                      (список_людей,список_решений)
    nondeterm найти_человека_по_его_имени                                (имя,список_высказываний,человек) - (i,i,o)
    nondeterm найти_высказывание_человека_по_номеру_и_его_имени          (имя,номер,список_высказываний,высказывание) - (i,i,i,o)

    nondeterm проверка                                                   (высказывание, список_высказываний)
    nondeterm говорит                                                    (высказывание, список_высказываний)
    nondeterm все_из_разных_племён                                       (человек,человек,человек,человек)
    nondeterm все_из_одного_племени                                      (человек,человек,человек,человек)
    nondeterm все_из_одного_племени                                      (человек,человек)

    nondeterm решение_без_повторов                                       (список_решений, список_решений, список_решений) - (i,i,o)
    nondeterm генерация_и_проверка_гипотезы                              (список_людей)
    nondeterm решение                                                    (список_решений)
CLAUSES
% предикаты, задающие значения переменным
    возможное_племя( сорореанец ).
    возможное_племя( норореанец ).
    возможное_племя( мидрореанец ).
    возможное_содержание_высказывания_в_зависимости_от_племени( сорореанец, правда ).
    возможное_содержание_высказывания_в_зависимости_от_племени( норореанец, ложь ).
    возможное_содержание_высказывания_в_зависимости_от_племени( мидрореанец, ложь ).
    возможное_содержание_высказывания_в_зависимости_от_племени( мидрореанец, правда ).
    возможное_содержание_высказывания_в_зависимости_от_племени( мидрореанец, правда, ложь ).
    возможное_содержание_высказывания_в_зависимости_от_племени( мидрореанец, ложь, правда ).
    возможное_содержание_высказывания_в_зависимости_от_племени( сорореанец, правда, правда ).
    возможное_содержание_высказывания_в_зависимости_от_племени( норореанец, ложь, ложь ).
% дополнительные предикаты
    проверка_на_уникальность([]).
    проверка_на_уникальность([А|Остаток])
    :-
        проверка_на_уникальность(А, Остаток),
        проверка_на_уникальность(Остаток)
    .
    проверка_на_уникальность(_, []).
    проверка_на_уникальность(А, [Б|Остаток])
    :-
        not(А = Б), проверка_на_уникальность(А, Остаток)
    .
    найти_человека_по_его_имени
    (
        Искомое_имя,
        [ высказывание( человек( Текущее_имя, Текущее_племя ),_,_ )|Хвост ], 
        Соответствующий_человек
    )
    :-
        Искомое_имя = Текущее_имя,
        Соответствующий_человек = человек( Текущее_имя, Текущее_племя )
    ;
        not(Искомое_имя = Текущее_имя),
        найти_человека_по_его_имени( Искомое_имя,Хвост,Соответствующий_человек )
    .
    найти_высказывание_человека_по_номеру_и_его_имени
    (
        Искомое_имя,
        Искомый_номер,
        [
            высказывание
            (
                человек( Имя_текущего_человека,Племя_текущего_человека ),
                Номер_текущего_высказывания,
                Содержание_текущего_высказывания
            )
            |Хвост
        ], 
        Соответствующее_высказывание
    )
    :-
        Искомое_имя = Имя_текущего_человека,
        Искомый_номер = Номер_текущего_высказывания,
        Соответствующее_высказывание = высказывание
        (
            человек( Имя_текущего_человека,Племя_текущего_человека ),
            Номер_текущего_высказывания,
            Содержание_текущего_высказывания
        )
    ;
        not(Искомое_имя = Имя_текущего_человека),
        найти_высказывание_человека_по_номеру_и_его_имени(Искомое_имя,Искомый_номер,Хвост,Соответствующее_высказывание)
    ;
        not(Искомый_номер = Номер_текущего_высказывания),
        найти_высказывание_человека_по_номеру_и_его_имени(Искомое_имя,Искомый_номер,Хвост,Соответствующее_высказывание)
    .
    найти( Элемент, [ Первый | _ ] )
    :-
        Элемент = Первый
    .
    найти( Элемент, [ Первый | Остальные ] )
    :-
        not( Элемент = Первый ),
        найти( Элемент, Остальные )
    .
    решение_без_повторов( [], Накопитель, СписокБезПовторов )
    :-
        СписокБезПовторов = Накопитель
    .
    решение_без_повторов( [ ПервыйЭлемент | ОстальныеЭлементы ], Накопитель, СписокБезПовторов )
    :-
        найти( ПервыйЭлемент, Накопитель ), 
        решение_без_повторов( ОстальныеЭлементы, Накопитель, СписокБезПовторов )
    .
    решение_без_повторов( [ ПервыйЭлемент | ОстальныеЭлементы ], Накопитель, СписокБезПовторов )
    :-
        not( найти(ПервыйЭлемент, Накопитель) ),
        решение_без_повторов( ОстальныеЭлементы, [ ПервыйЭлемент | Накопитель ], СписокБезПовторов )
    .
% предикаты для высказываний
    проверка(Высказывание, Список_высказываний)
    :-
        Высказывание = высказывание( человек(_,_),_,правда ),
        говорит(Высказывание, Список_высказываний)
    ;
        Высказывание = высказывание( человек(_,_),_,ложь ),
        not(говорит(Высказывание, Список_высказываний))
    .
    все_из_одного_племени(Б,В)
    :-
        Б = человек(_,Племя_Б),
        В = человек(_,Племя_В),
        Племя_Б = Племя_В
    .
    все_из_одного_племени(А,Б,В,Н)
    :-
        А = человек(_,Племя_А),
        Б = человек(_,Племя_Б),
        В = человек(_,Племя_В),
        Н = человек(_,Племя_Н),
        Племя_А = Племя_Б,
        Племя_Б = Племя_В,
        Племя_В = Племя_Н
    .
    все_из_разных_племён(А,Б,В,Н)
    :-
        А = человек(_,Племя_А),
        Б = человек(_,Племя_Б),
        В = человек(_,Племя_В),
        Н = человек(_,Племя_Н),
        проверка_на_уникальность([Племя_А,Племя_Б,Племя_В,Племя_Н])
    .
% А: Мы все из разных племен.
    говорит(высказывание( человек(а,_),1,_ ),Список_высказываний)
    :-
        найти_человека_по_его_имени( а,Список_высказываний,А ),
        найти_человека_по_его_имени( б,Список_высказываний,Б ),
        найти_человека_по_его_имени( в,Список_высказываний,В ),
        найти_человека_по_его_имени( н,Список_высказываний,Н ),
        все_из_разных_племён( А,Б,В,Н )
    .
% Б: Мы все из одного племени.
    говорит(высказывание( человек(б,_),1,_ ),Список_высказываний)
    :-
        найти_человека_по_его_имени( а,Список_высказываний,А ),
        найти_человека_по_его_имени( б,Список_высказываний,Б ),
        найти_человека_по_его_имени( в,Список_высказываний,В ),
        найти_человека_по_его_имени( н,Список_высказываний,Н ),
        все_из_одного_племени( А,Б,В,Н )
    .
% В.1: Мы не из одного племени.
    говорит(высказывание( человек(в,_),1,_ ),Список_высказываний)
    :-
        найти_человека_по_его_имени( а,Список_высказываний,А ),
        найти_человека_по_его_имени( б,Список_высказываний,Б ),
        найти_человека_по_его_имени( в,Список_высказываний,В ),
        найти_человека_по_его_имени( н,Список_высказываний,Н ),
        not( все_из_одного_племени(А,Б,В,Н) )
    .
% В.2: Мы с Б из одного племени.
    говорит(высказывание( человек(в,Племя_В),2,_ ),Список_высказываний)
    :-
        найти_человека_по_его_имени( б,Список_высказываний,Б ),
        все_из_одного_племени( Б,человек(в,Племя_В) )
    .
% Н.1: Я не согласен с высказыванием А.
    говорит(высказывание( человек(н,_),1,_ ),Список_высказываний)
    :-
        not(говорит(высказывание( человек(а,_),1,_ ),Список_высказываний))
    .
% Н.2: Я не согласен с высказыванием Б.
    говорит(высказывание( человек(н,_),2,_ ),Список_высказываний)
    :-
        not(говорит(высказывание( человек(б,_),1,_ ),Список_высказываний))
    .
% Н.3: Я не согласен с первым высказыванием В.
    говорит(высказывание( человек(н,_),3,_ ),Список_высказываний)
    :-
        not(говорит(высказывание( человек(в,_),1,_ ),Список_высказываний))
    .
% предикат проверки генерации и гипотезы
    генерация_и_проверка_гипотезы( Решение )
    :-
        % генерация гипотез
        Имя_Первого = а,
        Имя_Второго = б,
        Имя_Третьего = в,
        Имя_Четвёртого = н,
        возможное_племя ( Племя_Первого ),
        возможное_племя ( Племя_Второго ),
        возможное_племя ( Племя_Третьего ),
        возможное_племя ( Племя_Четвёртого ),
        возможное_содержание_высказывания_в_зависимости_от_племени ( Племя_Первого, T1 ),
        возможное_содержание_высказывания_в_зависимости_от_племени ( Племя_Второго, T2 ),
        возможное_содержание_высказывания_в_зависимости_от_племени ( Племя_Третьего, T31 ),
        возможное_содержание_высказывания_в_зависимости_от_племени ( Племя_Третьего, T31, T32 ),
        возможное_содержание_высказывания_в_зависимости_от_племени ( Племя_Четвёртого, T41 ),
        возможное_содержание_высказывания_в_зависимости_от_племени ( Племя_Четвёртого, T41, T42 ),
        возможное_содержание_высказывания_в_зависимости_от_племени ( Племя_Четвёртого, T42, T43 ),
        H11 = высказывание( человек(Имя_Первого, Племя_Первого), 1, T1 ),
        H21 = высказывание( человек(Имя_Второго, Племя_Второго), 1, T2 ),
        H31 = высказывание( человек(Имя_Третьего, Племя_Третьего), 1, T31 ),
        H32 = высказывание( человек(Имя_Третьего, Племя_Третьего), 2, T32 ),
        H41 = высказывание( человек(Имя_Четвёртого, Племя_Четвёртого), 1, T41 ),
        H42 = высказывание( человек(Имя_Четвёртого, Племя_Четвёртого), 2, T42 ),
        H43 = высказывание( человек(Имя_Четвёртого, Племя_Четвёртого), 3, T43 ),
        Гипотеза = [ H11, H21, H31, H32, H41, H42, H43 ],
        % проверка гипотез
        проверка ( H11, Гипотеза ),
        проверка ( H21, Гипотеза ),
        проверка ( H31, Гипотеза ),
        проверка ( H32, Гипотеза ),
        проверка ( H41, Гипотеза ),
        проверка ( H42, Гипотеза ),
        проверка ( H43, Гипотеза ),
        % проверка пройдена, формируем ответ
        Решение = 
        [
            человек( Имя_Первого, Племя_Первого ),
            человек( Имя_Второго, Племя_Второго ),
            человек( Имя_Третьего, Племя_Третьего ),
            человек( Имя_Четвёртого, Племя_Четвёртого )
        ]
    .
% предикат поиска решения
    решение( Список_решений )
    :-
        findall
        (
            _Решения,
            генерация_и_проверка_гипотезы( _Решения ),
            Решения
        ),
        решение_без_повторов( Решения, [], Список_решений )
    .
GOAL
    решение(Список_решений).