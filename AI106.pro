% ЗадачаAI106. Очередной шпион 4
% В некоторой далекой стране рыцари всегда говорили только правду и никогда не лгали, 
% а лжецы всегда только лгали и никогда не говорили правды. 
% — А теперь мы подходим к самой интересной задаче,—торжественно объявил Король.—Некий мистер
% Энтони присутствовал однажды на суде. Слушалось дело по обвинению в шпионаже. 
% На скамье подсудимых сидело трое А, В и С, относительно которых в начале заседания 
% было известно лишь, что один из них рыцарь, другой лжец и третий шпион.
% Подсудимого А судья спросил:
% — Вы шпион?
% А ответил односложно («да» или «нет»).
% Затем судья спросил подсудимого В:
% — Правду ли сказал А?
% В дал односложный ответ («да» или «нет»), после чего судья, указав на одного из подсудимых, заявил:
% — Вы не шпион, освобождаетесь из-под стражи и можете быть свободны!
% Тот с радостью покинул зал заседаний. 
% Затем судья спросил у одного из двух оставшихся на скамье подсудимых,
% шпион ли его сосед. Тот ответил одно­сложно («да» или «нет»), 
% после чего судья с уверенностью установил, кто шпион.

DOMAINS

   персонаж = персонаж(имя,тип)

   ответ,имя,тип = symbol

   список_ответов = ответ*

   список_типов = тип*

   список_персонажей = персонаж*

   процесс = процесс(список_персонажей,ответ,ответ,имя,ответ)

   номер = integer
   
   имена=имя*
   
   список_имен=имена*
   
   список_список_имен=список_имен*

   количество = integer

PREDICATES

nondeterm один_из(персонаж,список_персонажей)

nondeterm один_из(тип,список_типов)

nondeterm один_из(имя, имена)

nondeterm один_из(имена, список_имен)

nondeterm один_из(список_имен, список_список_имен)

nondeterm количество_элементов(список_имен,количество)

nondeterm количество_элементов(имена,количество)

nondeterm инверсия(список_имен,имя)

nondeterm один_из_ответов(ответ)

nondeterm один_из_участников(имя)

nondeterm один_из_типов(тип)

nondeterm решение_без_повторов(имена,имена,имена)

nondeterm решение_без_повторов(список_имен,список_имен,список_имен)

nondeterm решение_без_повторов(список_список_имен,список_список_имен,список_список_имен)

nondeterm решение_без_повторов(список_персонажей,список_персонажей,список_персонажей)

nondeterm сказал(персонаж,номер,ответ,процесс)

nondeterm проверка(персонаж,номер,ответ,процесс)

nondeterm исключить_подозреваемого(имя,список_персонажей,список_персонажей)

nondeterm гипотеза(процесс)

nondeterm проверка_гипотезы(процесс)

nondeterm поиск_шпионов(имена,ответ,ответ)

nondeterm поиск_шпионов2(имена,имя,ответ) 

nondeterm найти_не_шпиона(имя,ответ,ответ)

nondeterm найти_шпиона(имя)

nondeterm проверка_соседей(процесс)

CLAUSES

один_из(Что,[Что|_]).

один_из(Что,[_|Хвост]):-один_из(Что,Хвост).


количество_элементов([],0).

количество_элементов([_|Хвост_Списка],Количество):- количество_элементов(Хвост_Списка,Количество_в_хвосте), Количество=Количество_в_хвосте+1.

инверсия([Имя1|Хвост],Имя):-Хвост=[Имя2|_],один_из_участников(Имя),not(один_из(Имя,Имя1)),not(один_из(Имя,Имя2)).


один_из_ответов(да).

один_из_ответов(нет).

один_из_участников(а).

один_из_участников(б).

один_из_участников(в).

один_из_типов(рыцарь).

один_из_типов(лжец).

один_из_типов(шпион).

решение_без_повторов([], Накопитель, СписокБезПовторов):- СписокБезПовторов = Накопитель.

решение_без_повторов([ПервыйЭлемент|ОстальныеЭлементы], Накопитель, СписокБезПовторов):-
один_из(ПервыйЭлемент, Накопитель), 
решение_без_повторов(ОстальныеЭлементы, Накопитель, СписокБезПовторов).

решение_без_повторов([ПервыйЭлемент|ОстальныеЭлементы], Накопитель, СписокБезПовторов):-
NOT(один_из(ПервыйЭлемент, Накопитель)),
решение_без_повторов(ОстальныеЭлементы, [ПервыйЭлемент|Накопитель], СписокБезПовторов).    
    
проверка(Персонаж,Номер,Ответ,Процесс):- Персонаж = персонаж(_,рыцарь),сказал(Персонаж,Номер,Ответ,Процесс).

проверка(Персонаж,Номер,Ответ,Процесс):- Персонаж = персонаж(_,лжец),not(сказал(Персонаж,Номер,Ответ,Процесс)).

проверка(Персонаж,_,_,_):- Персонаж = персонаж(_,шпион).

исключить_подозреваемого(_,[],[]).

исключить_подозреваемого(Имя,[персонаж(Имя,_)|InT],OutList) :- исключить_подозреваемого(Имя,InT,OutList).

исключить_подозреваемого(Имя,[InH|InT],[InH|OutT]) :- not(InH = персонаж(Имя,_)),исключить_подозреваемого(Имя,InT,OutT).

%Генерация Гипотезы
гипотеза(Процесс):- один_из_типов(ТипА), один_из_типов(ТипБ),один_из_типов(ТипВ),
		    ПерсонажА = персонаж(а,ТипА), 
		    ПерсонажБ = персонаж(б,ТипБ), not(ТипБ = ТипА), 
		    ПерсонажВ = персонаж(в,ТипВ), not(ТипВ = ТипА),not(ТипВ = ТипБ), 
%Затем судья спросил у одного из двух оставшихся на скамье подсудимых (ДалОтвет3), шпион ли его сосед (Ответ3)
		    один_из_ответов(Ответ1),один_из_ответов(Ответ2), один_из_участников(ДалОтвет3),один_из_ответов(Ответ3),
		    Персонажи = [ПерсонажА,ПерсонажБ,ПерсонажВ], Процесс = процесс(Персонажи,Ответ1,Ответ2,ДалОтвет3,Ответ3).
		    
сказал(персонаж(а,_),1,"да",Гипотеза):-Гипотеза = процесс(Персонажи,"да",_,_,_),
                                       один_из(персонаж(а,шпион),Персонажи).
сказал(персонаж(а,_),1,"нет",Гипотеза):-Гипотеза = процесс(Персонажи,"нет",_,_,_),
                                        not(один_из(персонаж(а,шпион),Персонажи)).
сказал(персонаж(б,_),1,"да",Гипотеза):- Гипотеза = процесс(Персонажи,_,"да",_,_),
                                        А = персонаж(а,_), один_из(А,Персонажи), сказал (А,1,"да",Гипотеза). 
сказал(персонаж(б,_),1,"нет",Гипотеза):-Гипотеза = процесс(Персонажи,_,"нет",_,_),
		                        А = персонаж(а,_), один_из(А,Персонажи), not(сказал (А,1,"нет",Гипотеза)).
сказал(Персонаж,2,"да",Гипотеза):-Гипотеза = процесс(Персонажи,_,_,_,"да"), 
				             один_из(Сосед,Персонажи), not(Сосед = Персонаж), Сосед = персонаж(_,шпион). 
сказал(Персонаж,2,"нет",Гипотеза):-Гипотеза = процесс(Персонажи,_,_,_,"нет"),
				   один_из(Сосед,Персонажи), not(Сосед = Персонаж), Сосед = персонаж(_,Тип), not(Тип = "шпион").
				
проверка_гипотезы(Процесс):-гипотеза(Процесс), Процесс = процесс(Персонажи,Ответ1,Ответ2,_,_),
	      		    ПерсонажА = персонаж(а,_),один_из(ПерсонажА,Персонажи),
	        	    проверка(ПерсонажА,1,Ответ1,Процесс),
	      		    ПерсонажБ = персонаж(б,_),один_из(ПерсонажБ,Персонажи),
	        	    проверка(ПерсонажБ,1,Ответ2,Процесс).

поиск_шпионов(Шпионы,Ответ1,Ответ2):-проверка_гипотезы(Процесс),
			             Процесс = процесс(Персонажи,Ответ1,Ответ2,_,_),
			             findall(Имя,один_из(персонаж(Имя, шпион),Персонажи), Шпионы).
			     
найти_не_шпиона(Имя,Ответ1,Ответ2):-findall(Шпионы, поиск_шпионов(Шпионы,"да","да"), ВсеШпионы),
    		                    решение_без_повторов(ВсеШпионы, [], Шпионы),Ответ1="да",Ответ2="да",
    		                    %write("Шпионы 'да','да':",Шпионы,"\n"),
                                    количество_элементов(Шпионы,КоличествоРешений), КоличествоРешений=2,инверсия(Шпионы,Имя); 
      	                            findall(Шпионы, поиск_шпионов(Шпионы,"да","нет"), ВсеШпионы),      	                     
    		                    решение_без_повторов(ВсеШпионы, [], Шпионы),Ответ1="да",Ответ2="нет",
    		                    %write("Шпионы 'да','нет':",Шпионы,"\n"), 
                                    количество_элементов(Шпионы,КоличествоРешений), КоличествоРешений=2,инверсия(Шпионы,Имя);         
                                    findall(Шпионы, поиск_шпионов(Шпионы,"нет","нет"), ВсеШпионы),
    		                    решение_без_повторов(ВсеШпионы, [], Шпионы),Ответ1="нет",Ответ2="нет", 
    		                    %write("Шпионы 'нет','нет':",Шпионы,"\n"),
                                    количество_элементов(Шпионы,КоличествоРешений), КоличествоРешений=2,инверсия(Шпионы,Имя); 
      		                    findall(Шпионы, поиск_шпионов(Шпионы,"нет","да"), ВсеШпионы),       		                   
    		                    решение_без_повторов(ВсеШпионы, [], Шпионы),Ответ1="нет",Ответ2="да",
    		                    %write("Шпионы 'нет','да':",Шпионы,"\n"), nl,
                                    количество_элементов(Шпионы,КоличествоРешений), КоличествоРешений=2,инверсия(Шпионы,Имя).			

проверка_соседей(Процесс2):-проверка_гипотезы(Процесс),
		            найти_не_шпиона(НеШпион,Ответ1,Ответ2),
		            Процесс=процесс(Персонажи1,Ответ1,Ответ2,ДалОтвет3,Ответ3),
		            исключить_подозреваемого(НеШпион,Персонажи1,Персонажи2),
		            Процесс2 = процесс(Персонажи2,Ответ1,Ответ2,ДалОтвет3,Ответ3),
		            Подозреваемый = персонаж(ДалОтвет3,_),один_из(Подозреваемый,Персонажи2), 
		            проверка(Подозреваемый,2,Ответ3,Процесс2).

поиск_шпионов2(Шпионы,ДалОтвет3,Ответ3):-проверка_соседей(Процесс),
		                      Процесс = процесс(Персонажи,_,_,ДалОтвет3,Ответ3),
		                      findall(Имя,один_из(персонаж(Имя, шпион),Персонажи), Шпионы).

найти_шпиона(ИмяШпиона):-findall(Шпионы, поиск_шпионов2(Шпионы,а,"да"), ВсеШпионы),
				    решение_без_повторов(ВсеШпионы, [], Шпионы), 
				    количество_элементов(Шпионы,КоличествоРешений), КоличествоРешений=1,
				    Шпионы=[[ИмяШпиона]|_],
				    write("Если последним спросили а, и он ответил 'дa', ");
				    findall(Шпионы, поиск_шпионов2(Шпионы,а,"нет"), ВсеШпионы),
				    решение_без_повторов(ВсеШпионы, [], Шпионы), 
				    количество_элементов(Шпионы,КоличествоРешений), КоличествоРешений=1,
				    Шпионы=[[ИмяШпиона]|_],
				    write("Если последним спросили а, и он ответил 'нет', ");
				    findall(Шпионы, поиск_шпионов2(Шпионы,б,"да"), ВсеШпионы),
			            решение_без_повторов(ВсеШпионы, [], Шпионы),
			            количество_элементов(Шпионы,КоличествоРешений), КоличествоРешений=1,
				    Шпионы=[[ИмяШпиона]|_],
				    write("Если последним спросили б, и он ответил 'дa', ");
				    findall(Шпионы, поиск_шпионов2(Шпионы,б,"нет"), ВсеШпионы),
				    решение_без_повторов(ВсеШпионы, [], Шпионы),
				    количество_элементов(Шпионы,КоличествоРешений), КоличествоРешений=1,
				    Шпионы=[[ИмяШпиона]|_],		    
				    write("Если последним спросили б, и он ответил 'нет', ").
				     
			  
GOAL
%найти_не_шпиона(ТочноНеШпион,_,_).
%поиск_шпионов(Шпионы, Ответ1, Ответ2).
найти_шпиона(Шпионом_является).