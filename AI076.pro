/*
                Кто же украл перец?
Подозрения Короля пали на Мартовского Зайца, Болванщика и Соню.

Солдаты были отправлены к их домику, но при обыске перца не обнаружили.
Поскольку трое подозреваемых могли спрятать перец в каком-нибудь тайнике, их арестовали из общих соображений.

На суде Мартовский Заяц заявил, что Болванщик невиновен, а Болванщик утверждал, что Соня невиновна.
Соня, когда ей предоставили слово, пробормотала что-то неразборчивое себе под нос,
но так и не проснулась, и ее показания не были внесены в протокол.

Выяснилось, что ни один невиновный не высказал ложного утверждения (Напомним, что те,
кто крадет перец, никогда не говорят правды).
Кроме того, установлено, что перец украл кто-то один.

Кто из трех обитателей домика виновен (если кто-нибудь из трех вообще виновен)?
*/
DOMAINS
    имя, вина     = symbol
    количество    = integer    
    подозреваемый = подозреваемый(имя, вина)
    подозреваемые = подозреваемый*
    список_имен   = имя*
PREDICATES 
    nondeterm входит_в                          (подозреваемый, подозреваемые)
    nondeterm входит_в                          (имя, список_имен)
    nondeterm возможная_вина                    (вина)
    nondeterm сказал                            (имя, подозреваемые)
    nondeterm проверить_показание               (имя, подозреваемые) 
    nondeterm проверить_показания_подозреваемых (подозреваемые)
    nondeterm украл_кто_то_один                 (подозреваемые, количество)    
    nondeterm генерация_гипотезы                (подозреваемые)
    nondeterm кто_же_вор                        (имя)
    nondeterm отсеять_дубли                     (список_имен, список_имен)
    nondeterm составить_список_всех_воров       (список_имен)
    nondeterm решение                           (имя)
    
CLAUSES
    входит_в(Первый,[Первый|_]).
    входит_в(Первый,[_|Хвост])
    :-
        входит_в(Первый,Хвост)
    .
%++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
    возможная_вина(виновен).
    возможная_вина(невиновен).
%++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    % На суде Мартовский Заяц заявил, что Болванщик невиновен. 
    сказал("Мартовский заяц", Подозреваемые) 
    :-
         входит_в(подозреваемый("Болванщик", невиновен), Подозреваемые)
    .

    % Болванщик утверждал, что Соня невиновна
    сказал("Болванщик", Подозреваемые) 
    :-
         входит_в(подозреваемый("Соня", невиновен), Подозреваемые)
    .

%++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    % Выяснилось, что ни один невиновный не высказал ложного утверждения 
    проверить_показание(Имя, Подозреваемые) 
    :-
         входит_в(подозреваемый(Имя, невиновен), Подозреваемые),
         сказал(Имя, Подозреваемые)
    .
                                               
    % (Напомним, что те, кто крадет перец, никогда не говорят правды).
    проверить_показание(Имя, Подозреваемые) 
    :-
        входит_в(подозреваемый(Имя, виновен), Подозреваемые),
        not(сказал(Имя, Подозреваемые))
    .
%++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    проверить_показания_подозреваемых(Подозреваемые)
    :-
        проверить_показание("Мартовский заяц",Подозреваемые),
        проверить_показание("Болванщик", Подозреваемые)
    .
%++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    % Кроме того, установлено, что перец украл кто-то один.
	украл_кто_то_один([], 0).
	украл_кто_то_один([Первый|Хвост_списка], Количество)
    :-
	    украл_кто_то_один(Хвост_списка, Количество_1),
	    Первый = подозреваемый(_, виновен),
	    Количество = Количество_1 + 1
    .

	украл_кто_то_один([Первый|Хвост_списка], Количество)
    :-
	    украл_кто_то_один(Хвост_списка, Количество_1),
	    Первый = подозреваемый(_, невиновен),
	    Количество = Количество_1
    .
%++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    генерация_гипотезы(Подозреваемые) 
    :-
        % Генерируем гипотезу - список подозреваемых со свойствами: имя и вина
        возможная_вина(Вина_1), возможная_вина(Вина_2), возможная_вина(Вина_3),
        Подозреваемые = [подозреваемый("Мартовский заяц", Вина_1),
                         подозреваемый("Болванщик", Вина_2),
                         подозреваемый("Соня", Вина_3)],

        % проверяем гипотезу
        украл_кто_то_один(Подозреваемые, 1),
        проверить_показания_подозреваемых(Подозреваемые)
    .
%++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    % выводим решение из проверенных гипотез
    кто_же_вор(Имя) 
    :-
        генерация_гипотезы(Подозреваемые),
        входит_в(подозреваемый(Имя, виновен), Подозреваемые)
    .
%++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    % оставить уникальные решения
    отсеять_дубли([], []). 
    отсеять_дубли([Первый | Хвост], Список) 
    :-
        отсеять_дубли(Хвост, Список_1),
        not(входит_в(Первый, Список_1)),
        Список = [Первый | Список_1];

        отсеять_дубли(Хвост, Список_1),
        входит_в(Первый, Список_1),
        Список = Список_1
    .
%++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    % все возможные уникальные решения
    составить_список_всех_воров(Список) 
    :-
        findall(Имя, кто_же_вор(Имя), Список_с_дублями),
        отсеять_дубли(Список_с_дублями, Список)
    .
%++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    % найти ответ
    решение(Вор) 
    :-
        составить_список_всех_воров(Список),
        not(Список = []),
        входит_в(Вор, Список);

        составить_список_всех_воров(Список),
        Список = [],
        Вор = "Виновных нет"
    .
    
GOAL 
    решение(Вор).