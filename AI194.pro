%  Выполнил: Подвигин В.А. 6О-208Б-17. Задача №AI194. 
%
%ИНСПЕКТОР И СЕРЖАНТ 
%"Какие выводы вы сделали бы из следующих фактов?" - спросил инспектор Крэг у сержанта Макферсона: 
%1.Если А виновен и В невиновен, то С виновен; 
%2.С никогда не действует в одиночку; 
%3.А никогда "не ходит на дело" вместе с С; 
%4.Никто, кроме А, В и С, в преступлении не замешан, и по крайней мере один из этой тройки виновен. 
%Сержант поскреб в затылке и сказал: "Боюсь, что я смогу извлечь из этих фактов не слишком много, сэр.
%А вы можете, опираясь на них, доказать, кто из трех подозреваемых виновен и кто не виновен?" 
%"Не могу, - признался Крэг, - но, чтобы выдвинуть неопровержимое обвинение против одного из них, материала вполне достаточно". 
%Чья виновность не вызывает сомнений? 

DOMAINS 
имя = symbol 
имена = имя* 
роль = виновен;не_виновен 
персонаж = персонаж(имя,роль) 
подозреваемые = персонаж*
список_имён=имена*
номер_высказывания = integer

PREDICATES
nondeterm возможная_роль(роль)
nondeterm генерация_гипотезы(подозреваемые)
nondeterm входит_в(персонаж, подозреваемые)	
nondeterm входит_в(имя, имена)	
nondeterm количество(имена, integer) 
nondeterm говорит(номер_высказывания,подозреваемые)
nondeterm проверка_гипотезы(подозреваемые)
nondeterm поиск_решения(имена)
nondeterm поиск_виновного_с_проверкой(имя)
nondeterm поиск_виновного(имя)
nondeterm проверка(имя, список_имён)
nondeterm решение_без_повторов(имена, имена, имена)
nondeterm один_из(имя, имена)


CLAUSES
	входит_в(Персонаж,[Персонаж|_]).
	входит_в(Персонаж,[_|Хвост_Списка_Персонажей]):-входит_в(Персонаж,Хвост_Списка_Персонажей).
	
	количество([], 0).
 	количество([_Первый|Хвост_количества], Количество):-
   		количество(Хвост_количества, КоличествоОстальных),
    		Количество = КоличествоОстальных+1.
    	  		
    	один_из(Элемент, [Первый|_]):-	Элемент = Первый.
 	один_из(Элемент, [Первый|Остальные]):- not(Элемент = Первый), один_из(Элемент, Остальные).
    
  	решение_без_повторов([], Накопитель, СписокБезПовторов):- СписокБезПовторов = Накопитель.
  	решение_без_повторов([ПервыйЭлемент|ОстальныеЭлементы], Накопитель, СписокБезПовторов):-
  	  один_из(ПервыйЭлемент, Накопитель), 
      	  решение_без_повторов(ОстальныеЭлементы, Накопитель, СписокБезПовторов).
	решение_без_повторов([ПервыйЭлемент|ОстальныеЭлементы], Накопитель, СписокБезПовторов):-
     	  NOT(один_из(ПервыйЭлемент, Накопитель)),
     	  решение_без_повторов(ОстальныеЭлементы, [ПервыйЭлемент|Накопитель], СписокБезПовторов).
     	 
     	проверка(Имя, [ГоловаВиновных|ХвостВиновных]):- 
     		входит_в(Имя, ГоловаВиновных), not(ХвостВиновных=[]), проверка(Имя, ХвостВиновных);
     		ХвостВиновных=[], входит_в(Имя, ГоловаВиновных).
     		
	возможная_роль(виновен).
	возможная_роль(не_виновен).
	
       /*     Генерация гипотезы    */
	генерация_гипотезы(Подозреваемые):- 
		возможная_роль(РольA),
		возможная_роль(РольB),
		возможная_роль(РольC),
		Подозреваемые=[персонаж("A",РольA),
		  	       персонаж("B",РольB), 
		  	       персонаж("C",РольC)],
%4.Никто, кроме А, В и С, в преступлении не замешан, и по крайней мере один из этой тройки виновен. 		  
		findall(Имя, входит_в(персонаж(Имя, виновен), Подозреваемые), Виновные), 
				   количество(Виновные,ЧислоВиновных), ЧислоВиновных>0.
		  		 
%1.Если А виновен и В невиновен, то С виновен; 
	говорит(1,Подозреваемые):- входит_в(персонаж("A",виновен),Подозреваемые), входит_в(персонаж("B",не_виновен),Подозреваемые),  
			           входит_в(персонаж("C",виновен),Подозреваемые);
			           входит_в(персонаж("A",не_виновен),Подозреваемые); входит_в(персонаж("B",виновен),Подозреваемые).
			           
%2.С никогда не действует в одиночку; 	
	говорит(2,Подозреваемые):- входит_в(персонаж("C",виновен),Подозреваемые),
				   findall(Имя, входит_в(персонаж(Имя, виновен), Подозреваемые), Виновные), 
				   количество(Виновные,ЧислоВиновных), ЧислоВиновных>1;
				   входит_в(персонаж("C",не_виновен),Подозреваемые).
	        	           
%3.А никогда "не ходит на дело" вместе с С; 	     
	говорит(3,Подозреваемые):- входит_в(персонаж("A",виновен),Подозреваемые), not(входит_в(персонаж("C",виновен),Подозреваемые));
				   входит_в(персонаж("A",не_виновен),Подозреваемые).
					   		
        /*    Проверка гипотезы     */	
	 проверка_гипотезы(Подозреваемые):-
	 	генерация_гипотезы(Подозреваемые),
	 	%1.Если А виновен и В невиновен, то С виновен
	 	говорит(1,Подозреваемые),
	 	%2.С никогда не действует в одиночку 	
	 	говорит(2,Подозреваемые),
	 	%3.А никогда "не ходит на дело" вместе с С 	  
	 	говорит(3,Подозреваемые).     	
        
         поиск_решения(ВсеРешения):-
                проверка_гипотезы(Подозреваемые),
                findall(Имя, входит_в(персонаж(Имя, виновен), Подозреваемые), ВсеРешения).
                                  
         поиск_виновного_с_проверкой(Виновный):-
                findall(ВариантыВиновных, поиск_решения(ВариантыВиновных),ВсеВиновные),
                поиск_решения(ВариантыВиновных),
                входит_в(Виновный,ВариантыВиновных),
                проверка(Виновный, ВсеВиновные).
	
        поиск_виновного(Виновный):-
               findall(ВариантыВиновных, поиск_виновного_с_проверкой(ВариантыВиновных),ВсеВиновные),
               решение_без_повторов(ВсеВиновные, [], [Виновный|_]).	
GOAL
  поиск_виновного(Виновность_не_вызывает_сомнений).

