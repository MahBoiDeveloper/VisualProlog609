% «адача є142
% ƒрузь€ - полиглоты
% 
% ∆уравлев, ƒанилов и Ќикольский Ц друзь€ и владеют каждый двум€ из следующих
% шести иностранных €зыков: английским, французским, немецким, италь€нским,
% испанским и арабским.  аждым из этих €зыков владеет только один из них.
% 
% «нающие французский и испанский €зыки Ц любители хокке€. ∆уравлев Ц самый
% младший из друзей. Ќикольский чаще ходит в гости к знающему немецкий €зык, чем к
% знающему испанский €зык. «нающий немецкий €зык старше знающего арабский €зык.
% ∆уравлев и владеющий английским €зыком часто играют в шахматы, а владеющий
% арабским €зыком не умеет играть в шахматы.  акими €зыками владеет каждый из друзей?

DOMAINS
    друг                        = друг(фамили€, факты, список_€зыков)
    фамили€                     = symbol
    список_€зыков               = €зык*
    €зык                        = symbol

    факты                       = факты(любитель_хокке€, возраст, визиты_друга, шахматист)
    визиты_друга                = визиты_друга(фамили€, частота_посещений)
    частота_посещений           = symbol
    возраст                     = symbol
    любитель_хокке€             = symbol
    шахматист                   = symbol

    номер, число                = integer
    список_возрастов            = возраст*
    список_фамилий              = фамили€*
    список_друзей               = друг*
    список_визитов_друга        = визиты_друга*
    список_частот_визитов_друга = частота_посещений*
    список_шахматистов          = шахматист*

    €зыки_друга                 = €зыки_друга(фамили€, список_€зыков)
    список_решений              = €зыки_друга*
    список_списков_решений      = список_решений*
PREDICATES
    nondeterm возможный_€зык                  (€зык)
    nondeterm возможный_возраст               (возраст)
    nondeterm возможный_любитель_хокке€       (любитель_хокке€)
    nondeterm возможный_шахматист             (шахматист)
    nondeterm возможна€_фамили€_друга         (фамили€)
    nondeterm возможна€_частота_визитов_друга (частота_посещений)

    nondeterm входит_в_список                 (друг, список_друзей)
    nondeterm входит_в_список                 (€зык, список_€зыков)
    nondeterm входит_в_список                 (возраст, список_возрастов)
    nondeterm входит_в_список                 (фамили€, список_фамилий)
    nondeterm входит_в_список                 (частота_посещений, список_частот_визитов_друга)
    nondeterm проверка_уникальности_списка    (список_€зыков)
    nondeterm проверка_уникальности_списка    (список_возрастов)
    nondeterm проверка_уникальности_списка    (список_фамилий)
    nondeterm проверка_уникальности_списка    (список_частот_визитов_друга)
    nondeterm найти_друга_по_€зыку            (друг, список_друзей, €зык) - (o,i,i)
    nondeterm найти_друга_по_фамилии          (друг, список_друзей, фамили€) - (o,i,i)

    nondeterm утверждение                     (номер, список_друзей)
    nondeterm первый_друг_старше_второго      (друг, друг)
    nondeterm распределение_шахматистов       (список_шахматистов, число, число)
    nondeterm генераци€_гипотезы_с_проверкой  (список_решений)
    nondeterm решение_без_повторов            (список_списков_решений, список_списков_решений, список_списков_решений)
    nondeterm найти                           (список_решений, список_списков_решений)
    nondeterm поиск_решени€                   (список_списков_решений)
    nondeterm обработка_списка_решений        (номер, список_списков_решений)
CLAUSES
% вспомогательные предикаты работы со списками
    входит_в_список(ѕровер€емый_элемент, [ѕровер€емый_элемент | _]).
    входит_в_список(ѕровер€емый_элемент, [_ | ’вост_списка])
    :-
        входит_в_список(ѕровер€емый_элемент, ’вост_списка)
    .

    проверка_уникальности_списка([]).
    проверка_уникальности_списка( [A, B, C] )
    :-
        not(A=B),not(A=C),
        not(B=C)
    .
    проверка_уникальности_списка( [A, B, C, D, E, F] )
    :-
        not(A=B),not(A=C),not(A=D),not(A=E),not(A=F),
        not(B=C),not(B=D),not(B=E),not(B=F),
        not(C=D),not(C=E),not(C=F),
        not(D=E),not(D=F),
        not(E=F)
    .

    решение_без_повторов([], Ќакопитель, —писокЅезѕовторов)
    :-
        —писокЅезѕовторов = Ќакопитель
    .
    решение_без_повторов([ѕервыйЁлемент | ќстальныеЁлементы], Ќакопитель, —писокЅезѕовторов)
    :-
        найти(ѕервыйЁлемент, Ќакопитель),
        решение_без_повторов(ќстальныеЁлементы, Ќакопитель, —писокЅезѕовторов)
    .
    решение_без_повторов([ѕервыйЁлемент | ќстальныеЁлементы], Ќакопитель, —писокЅезѕовторов)
    :-
        not(найти(ѕервыйЁлемент, Ќакопитель)),
        решение_без_повторов(ќстальныеЁлементы, [ѕервыйЁлемент | Ќакопитель], —писокЅезѕовторов)
    .

    найти(Ёлемент, [ѕервый | _])
    :-
        Ёлемент = 
        [
            €зыки_друга(_, [язык11, язык12]),
            €зыки_друга(_, [язык21, язык22]),
            €зыки_друга(_, [язык31, язык32])
        ],

        ѕервый = 
        [
            €зыки_друга(_, [язык_11, язык_12]),
            €зыки_друга(_, [язык_21, язык_22]),
            €зыки_друга(_, [язык_31, язык_32])
        ],

        язык_11 = язык11, язык_12 = язык12,
        язык_21 = язык21, язык_22 = язык22,
        язык_31 = язык31, язык_32 = язык32;

        Ёлемент = 
        [
            €зыки_друга(_, [язык11, язык12]),
            €зыки_друга(_, [язык21, язык22]),
            €зыки_друга(_, [язык31, язык32])
        ],

        ѕервый = 
        [
            €зыки_друга(_, [язык_11, язык_12]),
            €зыки_друга(_, [язык_21, язык_22]),
            €зыки_друга(_, [язык_31, язык_32])
        ],

        язык_11 = язык12, язык_12 = язык11,
        язык_21 = язык21, язык_22 = язык22,
        язык_31 = язык31, язык_32 = язык32;

        Ёлемент = 
        [
            €зыки_друга(_, [язык11, язык12]),
            €зыки_друга(_, [язык21, язык22]),
            €зыки_друга(_, [язык31, язык32])
        ],

        ѕервый = 
        [
            €зыки_друга(_, [язык_11, язык_12]),
            €зыки_друга(_, [язык_21, язык_22]),
            €зыки_друга(_, [язык_31, язык_32])
        ],

        язык_11 = язык11, язык_12 = язык12,
        язык_21 = язык22, язык_22 = язык21,
        язык_31 = язык31, язык_32 = язык32;

        Ёлемент = 
        [
            €зыки_друга(_, [язык11, язык12]),
            €зыки_друга(_, [язык21, язык22]),
            €зыки_друга(_, [язык31, язык32])
        ],

        ѕервый = 
        [
            €зыки_друга(_, [язык_11, язык_12]),
            €зыки_друга(_, [язык_21, язык_22]),
            €зыки_друга(_, [язык_31, язык_32])
        ],

        язык_11 = язык11, язык_12 = язык12,
        язык_21 = язык21, язык_22 = язык22,
        язык_31 = язык32, язык_32 = язык31;

        Ёлемент = 
        [
            €зыки_друга(_, [язык11, язык12]),
            €зыки_друга(_, [язык21, язык22]),
            €зыки_друга(_, [язык31, язык32])
        ],

        ѕервый = 
        [
            €зыки_друга(_, [язык_11, язык_12]),
            €зыки_друга(_, [язык_21, язык_22]),
            €зыки_друга(_, [язык_31, язык_32])
        ],

        язык_11 = язык12, язык_12 = язык11,
        язык_21 = язык22, язык_22 = язык21,
        язык_31 = язык31, язык_32 = язык32;

        Ёлемент = 
        [
            €зыки_друга(_, [язык11, язык12]),
            €зыки_друга(_, [язык21, язык22]),
            €зыки_друга(_, [язык31, язык32])
        ],

        ѕервый = 
        [
            €зыки_друга(_, [язык_11, язык_12]),
            €зыки_друга(_, [язык_21, язык_22]),
            €зыки_друга(_, [язык_31, язык_32])
        ],

        язык_11 = язык11, язык_12 = язык12,
        язык_21 = язык22, язык_22 = язык21,
        язык_31 = язык32, язык_32 = язык31;

        Ёлемент = 
        [
            €зыки_друга(_, [язык11, язык12]),
            €зыки_друга(_, [язык21, язык22]),
            €зыки_друга(_, [язык31, язык32])
        ],

        ѕервый = 
        [
            €зыки_друга(_, [язык_11, язык_12]),
            €зыки_друга(_, [язык_21, язык_22]),
            €зыки_друга(_, [язык_31, язык_32])
        ],

        язык_11 = язык12, язык_12 = язык11,
        язык_21 = язык21, язык_22 = язык22,
        язык_31 = язык32, язык_32 = язык31;

        Ёлемент = 
        [
            €зыки_друга(_, [язык11, язык12]),
            €зыки_друга(_, [язык21, язык22]),
            €зыки_друга(_, [язык31, язык32])
        ],

        ѕервый = 
        [
            €зыки_друга(_, [язык_11, язык_12]),
            €зыки_друга(_, [язык_21, язык_22]),
            €зыки_друга(_, [язык_31, язык_32])
        ],

        язык_11 = язык12, язык_12 = язык11,
        язык_21 = язык22, язык_22 = язык21,
        язык_31 = язык32, язык_32 = язык31
    .

    найти(Ёлемент, [ѕервый | ќстальные])
    :-
        Ёлемент = 
        [
            €зыки_друга(_, [язык11, язык12]),
            €зыки_друга(_, [язык21, язык22]),
            €зыки_друга(_, [язык31, язык32])
        ],

        ѕервый = 
        [
            €зыки_друга(_, [язык_11, язык_12]),
            €зыки_друга(_, [язык_21, язык_22]),
            €зыки_друга(_, [язык_31, язык_32])
        ],

        not(язык_11 = язык11), not(язык_12 = язык12),
        not(язык_21 = язык21), not(язык_22 = язык22),
        not(язык_31 = язык31), not(язык_32 = язык32),
        найти(Ёлемент, ќстальные)
    ;

        Ёлемент = 
        [
            €зыки_друга(_, [язык11, язык12]),
            €зыки_друга(_, [язык21, язык22]),
            €зыки_друга(_, [язык31, язык32])
        ],

        ѕервый = 
        [
            €зыки_друга(_, [язык_11, язык_12]),
            €зыки_друга(_, [язык_21, язык_22]),
            €зыки_друга(_, [язык_31, язык_32])
        ],

        not(язык_11 = язык12), not(язык_12 = язык11),
        not(язык_21 = язык21), not(язык_22 = язык22),
        not(язык_31 = язык31), not(язык_32 = язык32),
        найти(Ёлемент, ќстальные)
    ;

        Ёлемент = 
        [
            €зыки_друга(_, [язык11, язык12]),
            €зыки_друга(_, [язык21, язык22]),
            €зыки_друга(_, [язык31, язык32])
        ],

        ѕервый = 
        [
            €зыки_друга(_, [язык_11, язык_12]),
            €зыки_друга(_, [язык_21, язык_22]),
            €зыки_друга(_, [язык_31, язык_32])
        ],

        not(язык_11 = язык11), not(язык_12 = язык12),
        not(язык_21 = язык22), not(язык_22 = язык21),
        not(язык_31 = язык31), not(язык_32 = язык32),
        найти(Ёлемент, ќстальные)
    ;

        Ёлемент = 
        [
            €зыки_друга(_, [язык11, язык12]),
            €зыки_друга(_, [язык21, язык22]),
            €зыки_друга(_, [язык31, язык32])
        ],

        ѕервый = 
        [
            €зыки_друга(_, [язык_11, язык_12]),
            €зыки_друга(_, [язык_21, язык_22]),
            €зыки_друга(_, [язык_31, язык_32])
        ],

        not(язык_11 = язык11), not(язык_12 = язык12),
        not(язык_21 = язык21), not(язык_22 = язык22),
        not(язык_31 = язык32), not(язык_32 = язык31),
        найти(Ёлемент, ќстальные)
    ;

        Ёлемент = 
        [
            €зыки_друга(_, [язык11, язык12]),
            €зыки_друга(_, [язык21, язык22]),
            €зыки_друга(_, [язык31, язык32])
        ],

        ѕервый = 
        [
            €зыки_друга(_, [язык_11, язык_12]),
            €зыки_друга(_, [язык_21, язык_22]),
            €зыки_друга(_, [язык_31, язык_32])
        ],

        not(язык_11 = язык12), not(язык_12 = язык11),
        not(язык_21 = язык22), not(язык_22 = язык21),
        not(язык_31 = язык31), not(язык_32 = язык32),
        найти(Ёлемент, ќстальные)
    ;

        Ёлемент = 
        [
            €зыки_друга(_, [язык11, язык12]),
            €зыки_друга(_, [язык21, язык22]),
            €зыки_друга(_, [язык31, язык32])
        ],

        ѕервый = 
        [
            €зыки_друга(_, [язык_11, язык_12]),
            €зыки_друга(_, [язык_21, язык_22]),
            €зыки_друга(_, [язык_31, язык_32])
        ],

        not(язык_11 = язык12), not(язык_12 = язык11),
        not(язык_21 = язык21), not(язык_22 = язык22),
        not(язык_31 = язык32), not(язык_32 = язык31),
        найти(Ёлемент, ќстальные)
    ;

        Ёлемент = 
        [
            €зыки_друга(_, [язык11, язык12]),
            €зыки_друга(_, [язык21, язык22]),
            €зыки_друга(_, [язык31, язык32])
        ],

        ѕервый = 
        [
            €зыки_друга(_, [язык_11, язык_12]),
            €зыки_друга(_, [язык_21, язык_22]),
            €зыки_друга(_, [язык_31, язык_32])
        ],

        not(язык_11 = язык11), not(язык_12 = язык12),
        not(язык_21 = язык22), not(язык_22 = язык21),
        not(язык_31 = язык32), not(язык_32 = язык31),
        найти(Ёлемент, ќстальные)
    ;

        Ёлемент = 
        [
            €зыки_друга(_, [язык11, язык12]),
            €зыки_друга(_, [язык21, язык22]),
            €зыки_друга(_, [язык31, язык32])
        ],

        ѕервый = 
        [
            €зыки_друга(_, [язык_11, язык_12]),
            €зыки_друга(_, [язык_21, язык_22]),
            €зыки_друга(_, [язык_31, язык_32])
        ],

        not(язык_11 = язык12), not(язык_12 = язык11),
        not(язык_21 = язык22), not(язык_22 = язык21),
        not(язык_31 = язык32), not(язык_32 = язык31),
        найти(Ёлемент, ќстальные)
    .

    найти_друга_по_€зыку(ƒруг_с_указанным_€зыком, [ƒруг | ’вост_списка], язык_друга)
    :-
        ƒруг = друг(_, _, языки_друга),
        not(входит_в_список(язык_друга, языки_друга)),
        найти_друга_по_€зыку(ƒруг_с_указанным_€зыком, ’вост_списка, язык_друга)
    ;

        ƒруг = друг(_, _, языки_друга),
        входит_в_список(язык_друга, языки_друга),
        ƒруг_с_указанным_€зыком = ƒруг
    .

    найти_друга_по_фамилии(ƒруг_с_указанной_фамилией,[ƒруг | ’вост_списка],‘амили€_друга):-
        not(ƒруг = друг(‘амили€_друга, _, _)),
        найти_друга_по_фамилии(ƒруг_с_указанной_фамилией, ’вост_списка, ‘амили€_друга);

        ƒруг_с_указанной_фамилией = ƒруг.

% вспомогательные предикаты дл€ проверки утверждений
    первый_друг_старше_второго
    (
        друг(_, факты(_, ¬озраст1, _, _), _),
        друг(_, факты(_, ¬озраст2, _, _), _)
    )
    :-
        ¬озраст1 = "старший",
        ¬озраст2 = "младший"
    ;

        ¬озраст1 = "старший",
        ¬озраст2 = "средний"
    ;

        ¬озраст1 = "средний",
        ¬озраст2 = "младший"
    .

    распределение_шахматистов([], _, _).
    распределение_шахматистов
    (
        [Ўахматист | ’вост_списка], 
        ќграничение_на_количество_шахматистов, 
         оличество_шахматистов_с_предыдущего_шага_рекурсии
    )
    :-
         оличество_шахматистов_с_предыдущего_шага_рекурсии <= ќграничение_на_количество_шахматистов,
        Ўахматист = "да",
         оличество_шахматистов_дл€_следующего_шага_рекурсии = 
             оличество_шахматистов_с_предыдущего_шага_рекурсии + 1,
        распределение_шахматистов
        (
            ’вост_списка, 
            ќграничение_на_количество_шахматистов, 
             оличество_шахматистов_дл€_следующего_шага_рекурсии
        )
    ;

         оличество_шахматистов_с_предыдущего_шага_рекурсии <= ќграничение_на_количество_шахматистов,
        Ўахматист = "нет",
        распределение_шахматистов
        (
            ’вост_списка, 
            ќграничение_на_количество_шахматистов, 
             оличество_шахматистов_с_предыдущего_шага_рекурсии
        )
    .

% предикаты проверки утверждений
    % «нающие французский и испанский €зыки Ц любители хокке€
    утверждение(1, —писок_друзей)
    :-
        найти_друга_по_€зыку(ѕервый_любитель_хокке€, —писок_друзей, "французский"),
        найти_друга_по_€зыку(¬торой_любитель_хокке€, —писок_друзей, "испанский"),
        not(ѕервый_любитель_хокке€ = ¬торой_любитель_хокке€),
        ѕервый_любитель_хокке€ = друг(_, факты("да", _, _, _), _),
        ¬торой_любитель_хокке€ = друг(_, факты("да", _, _, _), _)
    .

    % ∆уравлев - самый младший из друзей
    утверждение(2, —писок_друзей)
    :-
        ∆уравлев = друг("∆уравлев", факты(_, "младший", _, _), _),
        входит_в_список(∆уравлев, —писок_друзей)
    .

    % Ќикольский чаще ходит в гости к знающему немецкий €зык, чем к знающему испанский €зык
    утверждение(3, —писок_друзей)
    :-
        найти_друга_по_€зыку(ƒруг_с_немецким , —писок_друзей, "немецкий"),
        найти_друга_по_€зыку(ƒруг_с_испанским, —писок_друзей, "испанский"),
        ƒруг_с_немецким  = друг(_, факты(_, _, визиты_друга("Ќикольский", "часто"), _), _),
        ƒруг_с_испанским = друг(_, факты(_, _, визиты_друга("Ќикольский", "редко"), _), _)
    .

    % «нающий немецкий €зык старше знающего арабский €зык
    утверждение(4, —писок_друзей)
    :-
        найти_друга_по_€зыку(ƒруг1, —писок_друзей, "немецкий"),
        найти_друга_по_€зыку(ƒруг2, —писок_друзей, "арабский"),
        первый_друг_старше_второго(ƒруг1, ƒруг2)
    .

    % ∆уравлев и владеющий английским €зыком часто играют в шахматы
    утверждение(5, —писок_друзей)
    :-
        найти_друга_по_фамилии(∆уравлев, —писок_друзей, "∆уравлев"),
        ∆уравлев = друг(_, факты(_, _, _, "да"), _),
        найти_друга_по_€зыку(ƒруг, —писок_друзей, "английский"),
        ƒруг = друг(_, факты(_, _, _, "да"), _),
        not(ƒруг = ∆уравлев)
    .

    % а владеющий арабским €зыком не умеет играть в шахматы
    утверждение(6, —писок_друзей)
    :-
        найти_друга_по_€зыку(Ќелюбитель_шахмат, —писок_друзей, "арабский"),
        Ќелюбитель_шахмат = друг(_, факты(_, _, _, "нет"), _)
    .

% возможные €зыки, которым владеет какой-либо друг
    возможный_€зык("английский").
    возможный_€зык("французский").
    возможный_€зык("немецкий").
    возможный_€зык("италь€нский").
    возможный_€зык("испанский").
    возможный_€зык("арабский").

% возможные возрасты
    возможный_возраст("старший").
    возможный_возраст("средний").
    возможный_возраст("младший").

% возможна€ любовь к хоккею
    возможный_любитель_хокке€("да").
    возможный_любитель_хокке€("нет").

% возможный любитель шахмат
    возможный_шахматист("да").
    возможный_шахматист("нет").

% возможна€ фамили€ друга
    возможна€_фамили€_друга("∆уравлев").
    возможна€_фамили€_друга("ƒанилов").
    возможна€_фамили€_друга("Ќикольский").

% возможные визиты друга
    возможна€_частота_визитов_друга("никогда").
    возможна€_частота_визитов_друга("часто").
    возможна€_частота_визитов_друга("редко").

% генераци€ и проверка гипотезы
    генераци€_гипотезы_с_проверкой(–ешение)
    :- 
        возможный_€зык(язык11), возможный_€зык(язык12),
        возможный_€зык(язык21), возможный_€зык(язык22),
        возможный_€зык(язык31), возможный_€зык(язык32),
        проверка_уникальности_списка([язык11, язык12, язык21, язык22, язык31, язык32]),

        возможный_возраст(¬озраст1),
        возможный_возраст(¬озраст2),
        возможный_возраст(¬озраст3),
        проверка_уникальности_списка([¬озраст1, ¬озраст2, ¬озраст3]),

        возможный_шахматист(Ўахматист1),
        возможный_шахматист(Ўахматист2),
        возможный_шахматист(Ўахматист3),
        распределение_шахматистов([Ўахматист1, Ўахматист2, Ўахматист3], 2, 0),

        возможный_любитель_хокке€(Ћюбитель_’окке€1),
        возможный_любитель_хокке€(Ћюбитель_’окке€2),
        возможный_любитель_хокке€(Ћюбитель_’окке€3),

        возможна€_частота_визитов_друга(¬изиты_друга1),
        возможна€_частота_визитов_друга(¬изиты_друга2),
        возможна€_частота_визитов_друга(¬изиты_друга3),
        проверка_уникальности_списка([¬изиты_друга1, ¬изиты_друга2, ¬изиты_друга3]),
        ¬изиты_друга3 = "никогда",

        —писок_друзей = 
        [
            друг("∆уравлев",   факты(Ћюбитель_’окке€1, ¬озраст1, визиты_друга("Ќикольский", ¬изиты_друга1), Ўахматист1), [язык11, язык12]),
            друг("ƒанилов",    факты(Ћюбитель_’окке€2, ¬озраст2, визиты_друга("Ќикольский", ¬изиты_друга2), Ўахматист2), [язык21, язык22]),
            друг("Ќикольский", факты(Ћюбитель_’окке€3, ¬озраст3, визиты_друга("Ќикольский", ¬изиты_друга3), Ўахматист3), [язык31, язык32])
        ],

        утверждение(1, —писок_друзей),
        утверждение(2, —писок_друзей),
        утверждение(3, —писок_друзей),
        утверждение(4, —писок_друзей),
        утверждение(5, —писок_друзей),
        утверждение(6, —писок_друзей),

        –ешение = 
        [
            €зыки_друга("∆уравлев",   [язык11, язык12]),
            €зыки_друга("ƒанилов",    [язык21, язык22]),
            €зыки_друга("Ќикольский", [язык31, язык32])
        ]
    .

    поиск_решени€(–ешени€_задачи)
    :-
        findall
        (
            _–ешени€, 
            генераци€_гипотезы_с_проверкой(_–ешени€), 
            –ешени€
        ),
        решение_без_повторов(–ешени€, [], –ешени€_задачи),
        обработка_списка_решений(1, –ешени€_задачи)
    .

    обработка_списка_решений(Ќомер_решени€, [–ешение | ’вост_списка])
    :-

        –ешение = 
        [
            €зыки_друга("∆уравлев", [язык11, язык12]),
            €зыки_друга("ƒанилов", [язык21, язык22]),
            €зыки_друга("Ќикольский", [язык31, язык32])
        ],

        write("----------------------------------------------------------------"), nl,
        write("–ешение ", Ќомер_решени€, " |"),      nl,
        write("--------------------"),               nl,
        write("∆уравлев: ",   язык11, ", ", язык12), nl,
        write("ƒанилов: ",    язык21, ", ", язык22), nl,
        write("Ќикольский: ", язык31, ", ", язык32), nl,

        Ќомер_следующего_решени€ = Ќомер_решени€ + 1,
        обработка_списка_решений(Ќомер_следующего_решени€, ’вост_списка)
    .

    обработка_списка_решений(Ќомер_решени€, [])
    :-
         оличество_решений = Ќомер_решени€ - 1,
        write("----------------------------------------------------------------"), nl,
        nl, write("¬сего неповтор€ющихс€ решений: ",  оличество_решений), nl, nl
    .
        
GOAL
    поиск_решени€(–ешени€_задачи).
