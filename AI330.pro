/*
                  Три рыболова.
Три гиперборейца-рыболова вернулись с рыбалки. Известно, что один из этих троих –
сорореанец, который всегда говорит правду, второй – норореанец, который всегда лжет,
а третий – мидрореанец, который говорит правду и лжет через раз, но первый ответ может
быть и правдой, и ложью. Когда их спросили, много ли рыбы удалось поймать, один из
троих отказался отвечать, "а двое сказали вот что:
     А: 1. В наши сети попалась мало рыбы.
        2. Б забрасывал и вытаскивал сеть.
     Б: 1. Я управлял лодкой, а не занимался сетью.
        2. Мы наловили много рыбы.
        3. Если бы В уговорили ответить, он бы три раза повторил, что он сорореанец.
        
Кто и троих сорореанец, кто мидрореанец и кто норореанец?
*/
DOMAINS
    имя, племя, роль, истинность = string
    список_истинности            = истинность*

    рыбак                        = рыбак(имя, племя, роль, список_истинности)
    рыбаки                       = рыбак*
    список_гипотез               = рыбаки*

    рыбный_улов                  = string
    номер_высказывания           = integer  
PREDICATES
    nondeterm входит_в                         (рыбак, рыбаки)
    nondeterm один_из                          (истинность, список_истинности)

    nondeterm возможное_количество_рыбы        (рыбный_улов)
    nondeterm возможное_племя                  (племя)
    nondeterm возможная_роль                   (роль)
    nondeterm возможная_истинность             (истинность)

    nondeterm сказал                           (имя, номер_высказывания, рыбный_улов, рыбаки)
    nondeterm повторил_бы                      (имя, рыбаки)

    nondeterm найти_по_номеру                  (номер_высказывания, истинность, список_истинности)
    nondeterm проверить_высказывание           (имя, номер_высказывания, рыбный_улов, рыбаки) 
    nondeterm проверить_все_высказывания       (имя, рыбный_улов, рыбаки)
    nondeterm проверка_возможного_высказывания (имя, рыбаки)

    nondeterm возможные_списки_для_мидореанца  (список_истинности)
    nondeterm проверка_племени                 (имя, рыбаки)

    nondeterm ищем_решение                     (рыбаки)
    nondeterm племена_совпадают                (рыбаки, список_гипотез)
    nondeterm решение_без_повторов             (список_гипотез,список_гипотез,список_гипотез)
    nondeterm племена_рыбаков                  (племя, племя, племя)
CLAUSES
    входит_в(Персонаж, [ Персонаж | _ ]).
    входит_в(Персонаж ,[ _ | Хвост ])
    :-
        входит_в(Персонаж, Хвост)
    .

    один_из(Элемент, [ Элемент | _ ]).
    один_из(Элемент, [ Первый | Хвост ])
    :-
        not(Элемент = Первый),
        один_из(Элемент, Хвост)
    .

    возможное_количество_рыбы(мало).
    возможное_количество_рыбы(много).
    
    возможное_племя(сорореанец).
    возможное_племя(норореанец).
    возможное_племя(мидрореанец).

    возможная_роль(занимался_сетью).
    возможная_роль(управлял_лодкой).

    возможная_истинность(ложно).
    возможная_истинность(истинно).
%     А: 1. В наши сети попалась мало рыбы.
%        2. Б забрасывал и вытаскивал сеть.
    
    сказал("А", 1, Поймано_рыбы,_)
    :-
        Поймано_рыбы = мало
    .
    сказал("А", 2, _, Рыбаки)
    :-
        входит_в(рыбак("Б", _, занимался_сетью, _), Рыбаки)
    .
    
%     Б: 1. Я управлял лодкой, а не занимался сетью.
%        2. Мы наловили много рыбы.
%        3. Если бы В уговорили ответить, он бы три раза повторил, что он сорореанец.
    сказал("Б", 1, _, Рыбаки)
    :-
        входит_в(рыбак("Б", _, управлял_лодкой, _), Рыбаки)
    .
    сказал("Б", 2, Поймано_рыбы, _)
    :-
        Поймано_рыбы = много
    .
    сказал("Б", 3, _, Рыбаки)
    :-
        повторил_бы("В", Рыбаки)
    .
    % он бы три раза повторил, что он сорореанец
    повторил_бы(Имя, Рыбаки)
    :-
        входит_в(рыбак(Имя, сорореанец, _, _), Рыбаки),
        входит_в(рыбак(Имя, сорореанец, _, _), Рыбаки),
        входит_в(рыбак(Имя, сорореанец, _, _), Рыбаки)
    .
% проверка повторного Номер_высказывания
    % поиск в списке по номеру
    найти_по_номеру(Номер, Элемент, [ Элемент | _ ])
    :-
        Номер - 1 = 0
    .
    найти_по_номеру(Номер, Элемент, [ _ | Хвост ])
    :- 
           Номер_1 = Номер - 1,
           найти_по_номеру(Номер_1, Элемент, Хвост)
    .
    % проверить высказывание по его номеру
    проверить_высказывание(Имя, Номер_высказывания, Поймано_рыбы, Рыбаки)
    :-
        сказал(Имя, Номер_высказывания, Поймано_рыбы, Рыбаки),
        входит_в(рыбак(Имя, _, _, Список_истинности), Рыбаки),
        найти_по_номеру(Номер_высказывания, истинно, Список_истинности)
    .
    проверить_высказывание(Имя, Номер_высказывания, Поймано_рыбы, Рыбаки)
    :-
        not(сказал(Имя, Номер_высказывания, Поймано_рыбы, Рыбаки)),
        входит_в(рыбак(Имя, _, _, Список_истинности), Рыбаки),
        найти_по_номеру(Номер_высказывания, ложно, Список_истинности)
    .
    % проверка всех высказываний одного рыбака высказываний
    проверить_все_высказывания("А", Поймано_рыбы, Рыбаки)
    :- 
        проверить_высказывание("А", 1, Поймано_рыбы, Рыбаки),
        проверить_высказывание("А", 2, Поймано_рыбы, Рыбаки)
    .
    проверить_все_высказывания("Б", Поймано_рыбы, Рыбаки)
    :- 
        проверить_высказывание("Б", 1, Поймано_рыбы, Рыбаки),
        проверить_высказывание("Б", 2, Поймано_рыбы, Рыбаки),
        проверить_высказывание("Б", 3, Поймано_рыбы, Рыбаки)
    .
    % проверка того: повторил бы В истинное или ложное высказывание
    проверка_возможного_высказывания("В", Рыбаки)
    :-
        повторил_бы("В", Рыбаки),
        входит_в(рыбак("В", _, _, Список_истинности), Рыбаки),
        Список_истинности = [истинно]
    ;
        not(повторил_бы("В", Рыбаки)),
        входит_в(рыбак("В", _, _, Список_истинности), Рыбаки),
        Список_истинности = [ложно]
    .
    % с учетом того, что у рыбаков разное количество высказываний, определим все возможные списки истинности
    % для мидрореанцев с известным количеством высказываний (от 1-го до 3-х)
    возможные_списки_для_мидореанца([истинно]).
    возможные_списки_для_мидореанца([ложно]).
    возможные_списки_для_мидореанца([истинно, ложно]).
    возможные_списки_для_мидореанца([ложно, истинно]).
    возможные_списки_для_мидореанца([истинно, ложно, истинно]).
    возможные_списки_для_мидореанца([ложно, истинно, ложно]).
    % если сорореанец, то нет ложных высказываний
    проверка_племени(Имя, Рыбаки)
    :-
        входит_в(рыбак(Имя, сорореанец, _, Список_истинности), Рыбаки),
        not(один_из(ложно, Список_истинности))
    .
    % если норореанец, то нет истинных высказываний
    проверка_племени(Имя, Рыбаки)
    :-
        входит_в(рыбак(Имя, норореанец, _, Список_истинности), Рыбаки),
        not(один_из(истинно, Список_истинности))
    .
    % если мидореанец, то список истинности соответствует ранее определенным
    проверка_племени(Имя, Рыбаки)
    :-
        входит_в(рыбак(Имя, мидрореанец, _, Список_истинности), Рыбаки),
        возможные_списки_для_мидореанца(Список_истинности)
    .
% предикат для поиска подходящих гипотез
    ищем_решение(Рыбаки)
    :-
        % генерация гипотезы
        % Гипотеза - это список рыбаков со свойствами: имя, племя, роль в рыбалке, список истинности высказываний
        возможное_племя(Племя_А), возможное_племя(Племя_Б), возможное_племя(Племя_В),
        % имеем по одному представителю своего племени
        not(Племя_А = Племя_Б), not(Племя_А = Племя_В), not(Племя_Б = Племя_В),
        возможная_роль(Роль_А), возможная_роль(Роль_Б), возможная_роль(Роль_В),
        % Формируем списки истинности высказываний
        возможная_истинность(Истинность_А_1), возможная_истинность(Истинность_А_2),
        Список_истинности_А = [Истинность_А_1, Истинность_А_2],
        возможная_истинность(Истинность_Б_1), возможная_истинность(Истинность_Б_2), возможная_истинность(Истинность_Б_3),
        Список_истинности_Б = [Истинность_Б_1, Истинность_Б_2, Истинность_Б_3],
        % хоть В и повторяет 3 раза, но по смыслу это одно и то же высказывание, поэтому истинность одна
        возможная_истинность(Истинность_В),
        Список_истинности_В = [Истинность_В],
        % Формируем гипотезу
        Рыбаки =
        [
            рыбак("А", Племя_А, Роль_А, Список_истинности_А),
            рыбак("Б", Племя_Б, Роль_Б, Список_истинности_Б),
            рыбак("В", Племя_В, Роль_В, Список_истинности_В)
        ],
        % Проверка гипотезы
        возможное_количество_рыбы(Поймано_рыбы),

        проверить_все_высказывания("А", Поймано_рыбы, Рыбаки),
        проверить_все_высказывания("Б", Поймано_рыбы, Рыбаки),
        проверка_возможного_высказывания("В", Рыбаки),

        проверка_племени("А", Рыбаки),
        проверка_племени("Б", Рыбаки),
        проверка_племени("В", Рыбаки)
    .
            
% проверка на идентичность гипотез (в нашем случае гипотезы эквивалентны,
% если племена соответствующих рыбаков совпадают)
    племена_совпадают(Гипотеза, Список)
    :-
        входит_в(рыбак("А", Племя_А, _, _), Гипотеза),
        входит_в(рыбак("Б", Племя_Б, _, _), Гипотеза),
        входит_в(рыбак("В", Племя_В, _, _), Гипотеза),

        Список = [ Рыбаки | _ ],

        входит_в(рыбак("А", Племя_А, _, _), Рыбаки),
        входит_в(рыбак("Б", Племя_Б, _, _), Рыбаки),
        входит_в(рыбак("В", Племя_В, _, _), Рыбаки)
    .
% Постусловие. Если исходный список пустой, то возвращаем формирумый список как результат 
    решение_без_повторов([], Накопитель, СписокБезПовторов)
    :-
        СписокБезПовторов = Накопитель
    .
% Если текущий элемент списка уже есть в формируемом списке (Накопитель) , то переходим к проверке
% остальных элементов     
    решение_без_повторов([ ПервыйЭлемент | ОстальныеЭлементы ], Накопитель, СписокБезПовторов)
    :-
        племена_совпадают(ПервыйЭлемент, Накопитель), 
        решение_без_повторов(ОстальныеЭлементы, Накопитель, СписокБезПовторов)
    .
% Если текущий элемент списка отсутствует в формируемом списке (Накопитель), то добавляем его
% в Накопитель и переходим к проверке остальных элементов      
    решение_без_повторов([ ПервыйЭлемент | ОстальныеЭлементы ], Накопитель, СписокБезПовторов)
    :-
        not(племена_совпадают(ПервыйЭлемент, Накопитель)),
        решение_без_повторов(ОстальныеЭлементы, [ ПервыйЭлемент | Накопитель ], СписокБезПовторов)
    .

% находим племена рыбаков
    племена_рыбаков(Племя_А, Племя_Б, Племя_В)
    :-
        findall(Имена, ищем_решение(Имена), Все_Решения),
        решение_без_повторов(Все_Решения, [], Список),
        % если решение однозначно, то мы имеем список из одного элемента
        Список = [Рыбаки],

        входит_в(рыбак("А", Племя_А, _, _), Рыбаки),
        входит_в(рыбак("Б", Племя_Б, _, _), Рыбаки),
        входит_в(рыбак("В", Племя_В, _, _), Рыбаки)
    .
GOAL
    племена_рыбаков(А, Б, В).