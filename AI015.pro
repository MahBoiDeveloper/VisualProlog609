/*
                       Очередное Убийство

Совершено убийство. Подозрение пало на троих: Брауна, Джона и Смита. В процессе
расследования каждый из них сделал по два заявления.

  Браун: Я не делал этого. Джон не делал этого.
  Джон: Браун не делал этого. Это сделал Смит.
  Смит: Я не делал этого. Это сделал Браун.

В протоколе было указано, что один из подозреваемых - всеми уважаемый старик, и он
оба раза сказал правду, второй – известный мошенник и он оба раза солгал, третий –
ничем не примечательный житель города, и одно из его высказываний было истинным, а
второе ложным.

Кто совершил убийство, и как звали старика и мошенника?
*/

DOMAINS
    номер, количество              = integer
    имя, признак, вина, истинность = symbol
    список_истинности              = истинность*
    список_вины                    = вина*
    подозреваемый                  = подозреваемый(имя, признак, вина, список_истинности)
    гипотеза                       = подозреваемый*
    список_гипотез                 = гипотеза*
    
PREDICATES
    nondeterm возможный_признак                        (признак)
    nondeterm возможная_вина                           (вина)
    nondeterm возможная_истинность                     (истинность)
    nondeterm входит_в                                 (подозреваемый, гипотеза)
    nondeterm содержит_истинность_под_номером          (номер, список_истинности, истинность)
    nondeterm сказал                                   (номер, имя, гипотеза)
    nondeterm проверить_высказывание                   (номер, имя, гипотеза)
    nondeterm проверка_высказываний_подозреваемого     (имя, гипотеза)
    nondeterm содержит_количество                      (вина, список_вины, количество)
    nondeterm содержит_количество                      (истинность, список_истинности, количество)
    nondeterm возможный_список_истинности_высказываний (список_истинности)
    nondeterm проверка_соответствия_списка_признаку    (признак, список_истинности)
    nondeterm генерация_и_проверка_гипотезы            (гипотеза)
    nondeterm поиск_решения                            (имя, имя, имя)
    
CLAUSES
    возможный_признак(старик).
    возможный_признак(мошенник).
    возможный_признак(житель).
    
    возможная_вина(виновен).
    возможная_вина(невиновен).
    
    возможная_истинность(истинно).
    возможная_истинность(ложно).
    
    % поиск по списку
    входит_в(Элемент, [Первый | _])
    :-
        Элемент = Первый
    .
    входит_в(Элемент, [_ | Хвост_списка])
    :-
        входит_в(Элемент, Хвост_списка)
    .
    
    % Браун:
    % Я не делал этого.
    сказал(1, "Браун", Гипотеза)
    :-
        входит_в(подозреваемый("Браун", _, невиновен, _), Гипотеза)
    .
    % Джон не делал этого.
    сказал(2, "Браун", Гипотеза)
    :-
        входит_в(подозреваемый("Джон", _, невиновен, _), Гипотеза)
    .
            
    % Джон:
    % Браун не делал этого.
    сказал(1, "Джон", Гипотеза)
    :-
        входит_в(подозреваемый("Браун", _, невиновен, _), Гипотеза)
    .                                    
    % Это сделал Смит.
    сказал(2, "Джон", Гипотеза)
    :-
        входит_в(подозреваемый("Смит", _, виновен, _), Гипотеза)
    .
            
    % Смит:
    % Я не делал этого.
    сказал(1, "Смит", Гипотеза)
    :-
        входит_в(подозреваемый("Смит", _, невиновен, _), Гипотеза)
    .
    % Это сделал Браун.
    сказал(2, "Смит", Гипотеза)
    :-
        входит_в(подозреваемый("Браун", _, виновен, _), Гипотеза)
    .
    
    
    % поиск в списке по номеру
    содержит_истинность_под_номером(Номер, [Правдивость|_], Правдивость)
    :-
        Номер - 1 = 0
    .
    содержит_истинность_под_номером(Номер, [_|Хвост], Правдивость)
    :-
        Номер_1 = Номер - 1,
        not(Номер_1 = 0),
        содержит_истинность_под_номером(Номер_1, Хвост, Правдивость)
    .  
    
    % проверяем высказывание
    проверить_высказывание(Номер, Имя, Гипотеза)
    :-
        входит_в(подозреваемый(Имя, _, _, Истинность_высказываний),Гипотеза),
        содержит_истинность_под_номером(Номер, Истинность_высказываний, истинно),
        сказал(Номер, Имя, Гипотеза)
    .
    
    проверить_высказывание(Номер, Имя, Гипотеза)
    :-
        входит_в(подозреваемый(Имя, _, _, Истинность_высказываний),Гипотеза),
        содержит_истинность_под_номером(Номер, Истинность_высказываний, ложно),
        not(сказал(Номер, Имя, Гипотеза))
    .
           
           
    % проверяем все высказывания одного подозриваемого
    проверка_высказываний_подозреваемого(Имя, Гипотеза)
    :-
        проверить_высказывание(1, Имя, Гипотеза),
        проверить_высказывание(2, Имя, Гипотеза)
    .       
            
            
    % считаем количество высказываний по признаку истинности
    содержит_количество(_, [], 0).
    содержит_количество(Признак, [Первый|Хвост_списка], Количество)
    :-
        содержит_количество(Первый, Хвост_списка, Количество_1),
        Признак = Первый,
        Количество = Количество_1 + 1
    .
    
    содержит_количество(Признак, [Первый|Хвост_списка], Количество)
    :-
        содержит_количество(Признак, Хвост_списка, Количество_1),
        not(Признак = Первый),
        Количество = Количество_1
    .
    
     
    % формируем список для каждого подозреваемого, в котором говорится: какое из высказываний ложно, а какое истинно
    возможный_список_истинности_высказываний(Список)
    :-
        возможная_истинность(Истинность_1),
        возможная_истинность(Истинность_2),
        Список = [Истинность_1, Истинность_2]
    .
    
    % один из подозреваемых - всеми уважаемый старик, и он оба раза сказал правду
    проверка_соответствия_списка_признаку(старик, Список)
    :-
        содержит_количество(истинно, Список, 2)
    .
    % второй – известный мошенник, и он оба раза солгал
    проверка_соответствия_списка_признаку(мошенник, Список)
    :-
        содержит_количество(ложно, Список, 2)
    .
    % житель города, и одно из его высказываний было истинным, а второе ложным
    проверка_соответствия_списка_признаку(житель, Список)
    :-
        содержит_количество(истинно, Список, 1)
    .
    
    % гипотеза - предположение об имени каждого из троих, а также об их вине и истинности высказываний
    %генерация гипотезы
    генерация_и_проверка_гипотезы(Гипотеза)
    :- 
        %генерация гипотезы
        возможная_вина(Вина_1),
        возможная_вина(Вина_2),
        возможная_вина(Вина_3),
    
        Список_вины_подозреваемых = [Вина_1, Вина_2, Вина_3],
        % должен быть один виновный
        содержит_количество(виновен, Список_вины_подозреваемых, 1),
    
        возможный_признак(Признак_1),
        возможный_признак(Признак_2),
        возможный_признак(Признак_3),
        not(Признак_1 = Признак_2), not(Признак_1 = Признак_3), not(Признак_2 = Признак_3),
    
        возможный_список_истинности_высказываний(Список_1),
        возможный_список_истинности_высказываний(Список_2),
        возможный_список_истинности_высказываний(Список_3),
        проверка_соответствия_списка_признаку(Признак_1, Список_1),
        проверка_соответствия_списка_признаку(Признак_2, Список_2),
        проверка_соответствия_списка_признаку(Признак_3, Список_3),
    
        % Подозрение пало на троих
        Гипотеза = [подозреваемый("Браун", Признак_1, Вина_1, Список_1),
                    подозреваемый("Джон",  Признак_2, Вина_2, Список_2),
                    подозреваемый("Смит",  Признак_3, Вина_3, Список_3)],
    
        %проверка_гипотезы
        проверка_высказываний_подозреваемого("Браун", Гипотеза),
        проверка_высказываний_подозреваемого("Джон",  Гипотеза),
        проверка_высказываний_подозреваемого("Смит",  Гипотеза)
    .
    
    % находим искомую информацию
    поиск_решения(Виновен, Старик, Мошенник)
    :-
        генерация_и_проверка_гипотезы(Гипотеза),
        входит_в(подозреваемый(Виновен, _, виновен, _), Гипотеза),
        входит_в(подозреваемый(Старик, старик, _, _), Гипотеза),
        входит_в(подозреваемый(Мошенник, мошенник, _, _), Гипотеза)
    .
            
GOAL
    поиск_решения(Убийство_совершил, Старика_звали, Мошенника_звали).    